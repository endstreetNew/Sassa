@page "/"
@inject LoService loService
@inject DocumentService docService
@inject HttpClient Http


<WidgetTitle Title="Capture repair queue"></WidgetTitle>
<div class="gridContainer">
    <div class="LORecord">
        @if(selectedValidation is not null)
        {
            <EditCoverSheet ReferenceNum="@selectedValidation.ReferenceNum" Saved="OnSaved" Cancelled="OnCancelled"></EditCoverSheet>
        }
    </div>
    <div class="SOCPENperecord">
    </div>
    <div class="Queue">
    <Grid TItem="CustCoversheetValidation"
      DataProvider="ValidationDataProvider"
      AllowPaging="true"
      PageSize="20"
      PageSizeSelectorVisible="true"
      PageSizeSelectorItems="new int[]{10,20,50,100}"
      AllowSorting="true"
      AllowFiltering="true"
      AllowSelection="true"
      SelectedItemsChanged="OnSelectedItemsChanged"
      SelectionMode="GridSelectionMode.Single"
      FixedHeader="true"
      EmptyText="No validation results found."
      Class="table table-sm table-hover align-left">

@*     <GridColumn TItem="CustCoversheetValidation" PropertyName="ValidationDate" HeaderText="Date" >
        @context.ValidationDate
    </GridColumn>
    <GridColumn TItem="CustCoversheetValidation" PropertyName="ReferenceNum" HeaderText="Reference" >
        @context.ReferenceNum
    </GridColumn> *@
     <GridColumn TItem="CustCoversheetValidation" PropertyName="Validationresult" HeaderText="Error" >
        @context.Validationresult
    </GridColumn>
</Grid>
    </div>
    <div class="Preview">
        @if(selectedValidation is null)
        {
            <p>Select a record to preview the document</p>
        }
        else
        {
            <embed src="@($"documents/pdf/{selectedValidation.ReferenceNum}")" type="application/pdf" />
@* 
            <PdfViewer Url="@selectedFile" ></PdfViewer> *@
        }
    </div>
</div>


@code
{
    protected List<CustCoversheetValidation> RepairQueue = new();
    protected CustCoversheetValidation? selectedValidation;
    protected string? selectedFile;

    private async Task<GridDataProviderResult<CustCoversheetValidation>> ValidationDataProvider(GridDataProviderRequest<CustCoversheetValidation> request)
    {
        var data = await loService.GetRepairQueue();

        return new GridDataProviderResult<CustCoversheetValidation>
        {
            Data = data,
            TotalCount = 100 // Replace with actual total count if available
        };
    }
    private void OnSaved(CustCoversheet args)
    {
        throw new NotImplementedException();
        //Todo: Update ValidationTable
    }
    private void OnCancelled()
    {
        throw new NotImplementedException();
    }

    private async Task OnSelectedItemsChanged(HashSet<CustCoversheetValidation> validations)
    {
        if (validations.Count != 1)
        {
            selectedValidation = null;
            selectedFile = null;
            return;
        }
        selectedValidation = validations.First();
        StateHasChanged();
    }

   public class DocumentResponse
    {
        public string? Message { get; set; }
    }

}