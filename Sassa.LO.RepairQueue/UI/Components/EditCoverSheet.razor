@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@inject IDbContextFactory<LoModelContext> ContextFactory

<EditForm Model="@model" OnValidSubmit="SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary class="text-danger" />

    @if (loadError is not null)
    {
        <div class="alert alert-danger py-2">@loadError</div>
    }
    else if (!isLoaded)
    {
        <div class="text-secondary small">
            <span class="spinner-border spinner-border-sm me-2" /> Loading...
        </div>
    }
    else
    {
        <div class="row g-2">
            <div class="col-md-3">
                <label class="form-label">Reference #</label>
                <InputText class="form-control form-control-sm" @bind-Value="model.ReferenceNum" readonly />
            </div>
            <div class="col-md-3">
                <label class="form-label">ID Number</label>
                <InputText class="form-control form-control-sm" @bind-Value="model.TxtIdNumber" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Name</label>
                <InputText class="form-control form-control-sm" @bind-Value="model.TxtName" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Surname</label>
                <InputText class="form-control form-control-sm" @bind-Value="model.TxtSurname" />
            </div>

            <div class="col-md-3">
                <label class="form-label">Grant Type</label>
                <InputSelect class="form-select form-select-sm" @bind-Value="model.DrpdwnGrantTypes">
                    <option value="">(select)</option>
                    @foreach (var gt in GrantTypeOptions)
                    {
                        <option value="@gt">@gt</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label">Status</label>
                <InputSelect class="form-select form-select-sm" @bind-Value="model.DrpdwnStatus">
                    <option value="">(select)</option>
                    @foreach (var st in StatusOptions)
                    {
                        <option value="@st">@st</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label class="form-label">Capture Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="model.NewCaptureDate" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Application Date</label>
                <InputDate class="form-control form-control-sm" @bind-Value="model.NewApplicationDate" />
            </div>

            <div class="col-12">
                <label class="form-label">Result Notes</label>
                <InputText class="form-control form-control-sm" @bind-Value="model.Docsubmitted" />
            </div>
        </div>

        <div class="mt-3 d-flex gap-2">
            <button type="submit" class="btn btn-primary btn-sm" disabled="@isSaving">
                @if (isSaving)
                {
                    <span class="spinner-border spinner-border-sm me-1" />
                }
                Save
            </button>
            <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="Cancel" disabled="@isSaving">Cancel</button>
            @if (saveMessage is not null)
            {
                <span class="text-success small">@saveMessage</span>
            }
        </div>
    }
</EditForm>

@code {
    [Parameter] public string ReferenceNum { get; set; } = string.Empty;
    [Parameter] public EventCallback<CustCoversheet> Saved { get; set; }
    [Parameter] public EventCallback Cancelled { get; set; }
    [Parameter] public IEnumerable<string>? GrantTypeOptions { get; set; } = new[] { "OAG", "CSG", "DG", "FG" };
    [Parameter] public IEnumerable<string>? StatusOptions { get; set; } = new[] { "New", "Processing", "Complete", "Rejected" };

    private EditModel model = new();
    private CustCoversheet? entity;
    private bool isLoaded;
    private bool isSaving;
    private string? loadError;
    private string? saveMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(ReferenceNum))
        {
            loadError = "Reference number is required.";
            return;
        }

        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        isLoaded = false;
        loadError = null;
        saveMessage = null;
        try
        {
            await using var ctx = await ContextFactory.CreateDbContextAsync();
            entity = await ctx.CustCoversheets.AsNoTracking()
                .FirstOrDefaultAsync(c => c.ReferenceNum == ReferenceNum);

            if (entity is null)
            {
                loadError = "Record not found.";
            }
            else
            {
                model = new EditModel
                {
                    ReferenceNum = entity.ReferenceNum,
                    TxtIdNumber = entity.TxtIdNumber,
                    TxtName = entity.TxtName,
                    TxtSurname = entity.TxtSurname,
                    DrpdwnGrantTypes = entity.DrpdwnGrantTypes,
                    DrpdwnStatus = entity.DrpdwnStatus,
                    NewCaptureDate = entity.NewCaptureDate,
                    Docsubmitted = entity.Docsubmitted
                };
            }
        }
        catch (Exception ex)
        {
            loadError = "Failed to load. " + ex.Message;
        }
        finally
        {
            isLoaded = true;
        }
    }

    private async Task SaveAsync()
    {
        if (entity is null) return;
        isSaving = true;
        saveMessage = null;
        try
        {
            await using var ctx = await ContextFactory.CreateDbContextAsync();
            var current = await ctx.CustCoversheets
                .FirstOrDefaultAsync(c => c.ReferenceNum == model.ReferenceNum);

            if (current is null)
            {
                loadError = "Record disappeared.";
                return;
            }

            current.TxtIdNumber = model.TxtIdNumber;
            current.TxtName = model.TxtName;
            current.TxtSurname = model.TxtSurname;
            current.DrpdwnGrantTypes = model.DrpdwnGrantTypes;
            current.DrpdwnStatus = model.DrpdwnStatus;
            current.NewCaptureDate = model.NewCaptureDate;
            current.Docsubmitted = model.Docsubmitted;

            await ctx.SaveChangesAsync();
            saveMessage = "Saved.";
            await Saved.InvokeAsync(current);
        }
        catch (Exception ex)
        {
            loadError = "Save failed: " + ex.Message;
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task Cancel()
    {
        await Cancelled.InvokeAsync();
        await LoadAsync();
    }

    private class EditModel
    {
        [Required]
        public string ReferenceNum { get; set; } = string.Empty;

        [StringLength(13)]
        public string? TxtIdNumber { get; set; }

        [StringLength(80)]
        public string? TxtName { get; set; }

        [StringLength(80)]
        public string? TxtSurname { get; set; }

        [StringLength(40)]
        public string? DrpdwnGrantTypes { get; set; }

        [StringLength(40)]
        public string? DrpdwnStatus { get; set; }

        public DateTime? NewCaptureDate { get; set; }
        public DateTime? NewApplicationDate { get; set; }

        [StringLength(255)]
        public string? Docsubmitted { get; set; }
    }
}
