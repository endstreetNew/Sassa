@page "/lorepair"
@using Sassa.Models
@inject LoService loService
@inject DocumentService docService
@inject ILogger<LoRepair> Logger

<WidgetTitle Title="Capture repair queue"></WidgetTitle>
<div class="gridContainer">
     <div class="search">
         <div class="row">
            <div class="col">
                <div id="divSearchID" style="vertical-align: middle; display: table-cell; padding: 0 5px 0 5px;">
                    <input class="form-control" placeholder="Enter LO Referenc ..." @bind="txtSearchRef" />
                </div>
                <div style="vertical-align: middle; display: table-cell; padding: 0 5px 0 5px;">
                    <button type="button" class="btn btn-primary btn-sm form-control" @onclick="SearchRef"><span class="oi oi-magnifying-glass" aria-hidden="true"></span></button>
                </div>
            </div>
        </div>
    </div>
    <div class="status">
        @if (selectedValidation is not null)
        {
            <div class="alert alert-danger">@(selectedValidation is not null ? selectedValidation.Validationresult : "No Validation Error.")</div>
        }
    </div>
    <div class="LORecord">
        @if(selectedCover is not null)
        {
            <EditLoRecord ReferenceNum="@txtSearchRef" Saved="OnSaved" Cancelled="OnCancelled"></EditLoRecord>
        }
        else
        {
            <p>No LO Record ..</p>
        }
    </div>
@*     <div class="Queue">
     <QuickGrid Items="RepairQueue.AsQueryable()" Class="table-sm">
     <TemplateColumn Context="validation">
        <tr @onclick="() => OnSelectedItemChanged(validation)" style="cursor:pointer;">
            <td>@validation.ReferenceNum</td>
        </tr>
    </TemplateColumn>

            <PropertyColumn Title="Error" Property="@(u => u.Validationresult)" />
    </QuickGrid>
    </div> *@
    <div class="Preview">
        @if(selectedValidation is null)
        {
            <p>No Document ..</p>
        }
        else
        {
            <embed src="@($"documents/pdf/{selectedValidation.ReferenceNum}")" type="application/pdf" />
        }
    </div>
</div>


@code
{
    protected CustCoversheetValidation? selectedValidation;
    protected CustCoversheet? selectedCover;
    protected string? selectedFile;

    private string txtSearchRef = string.Empty;


    // protected override async Task OnInitializedAsync()
    // {
    //     //RepairQueue = await loService.GetRepairQueue();
    // }

    private async Task SearchRef()
    {
        try
        {
            selectedValidation = await loService.GetValidationRecord(txtSearchRef);
            selectedCover = await loService.GetEcover(txtSearchRef);
            Logger.LogInformation("Fetched LO Record and Validation Record for reference {Reference}", txtSearchRef);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching LO Record or Validation Record for reference {Reference}", txtSearchRef);
            selectedValidation = null;
            selectedCover = null;
        }// /documents/pdf/2907202510360972 and check HTTP 200 with Content-Type: application/pdf.
    }

    private async Task OnSaved(CustCoversheet args)
    {
        await SearchRef();
    }
    private async Task OnCancelled()
    {
        txtSearchRef = string.Empty;
        await SearchRef();
    }

    private void OnSelectedItemChanged(CustCoversheetValidation validation)
    {
        selectedValidation = validation;

        StateHasChanged();
    }

   public class DocumentResponse
    {
        public string? Message { get; set; }
    }

}