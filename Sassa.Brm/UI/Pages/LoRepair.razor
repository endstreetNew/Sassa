@page "/lorepair"
@using Sassa.Models
@inject LoService loService
@inject DocumentService docService
@inject ILogger<LoRepair> Logger

<WidgetTitle Title="Capture repair queue"></WidgetTitle>
<div class="gridContainer">
     <div class="search">
         <div class="row">
            <div class="col">
                <div id="divSearchID" style="vertical-align: middle; display: table-cell; padding: 0 5px 0 5px;">
                    <input class="form-control" placeholder="Enter LO Referenc ..." @bind="txtSearchRef" />
                </div>
                <div style="vertical-align: middle; display: table-cell; padding: 0 5px 0 5px;">
                    <button type="button" class="btn btn-primary btn-sm form-control" @onclick="SearchRef"><span class="oi oi-magnifying-glass" aria-hidden="true"></span></button>
                </div>
            </div>
        </div>
    </div>
    <div class="status">
        @if(!string.IsNullOrWhiteSpace(errorMessage))
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        else if(selectedValidation is not null)
        {
            if(selectedValidation.Validationresult == "UPDATED" || selectedValidation.Validationresult == "ok")
            {
              <div class="alert alert-info">@(selectedValidation.Validationresult)</div>  
            }
            else
            {
                <div class="alert alert-danger">@(selectedValidation.Validationresult)</div>
            }
        }
    </div>
    <div class="LORecord">
        @if(string.IsNullOrEmpty(txtSearchRef))
        {
           
        }
        else if(selectedValidation is not null && selectedValidation.Validationresult == "ok")
        {
            <div class="alert alert-info">File sucessfully processed.</div>  
        }
        else if(selectedCover is not null && selectedValidation is not null && pdfExists)
        {
            <EditLoRecord ReferenceNum="@txtSearchRef" Saved="OnSaved" Cancelled="OnCancelled" Rejected="OnRejected"></EditLoRecord>
        }
        else
        {
            <div class="alert alert-danger">Scan has not been processed yet or the scan for this document has failed.</div>
        }
    </div>
    <div class="SPRecord">
        @if(selectedCover is not null)
        {
            <ViewDcSocpen SearchId="@selectedCover.TxtIdNumber"/>
        }
        else
        {
            <p>No SOCPEN Records ..</p>
        }
    </div>
    <div class="Preview">
        @if (selectedValidation is null)
        {
             <p>No Document ..</p>
        }
        else if (selectedValidation.Validationresult != "ok" && !pdfExists)
        {
             <div class="alert alert-danger">Please rescan this document.</div>
        }
        else if (!pdfExists)
        {
            <p class="text-danger">PDF not found for this reference.</p>
        }
        else
        {
            <embed src="@($"documents/pdf/{selectedValidation.ReferenceNum}")" type="application/pdf" />
        }
    </div>
</div>


@code
{
    protected CustCoversheetValidation? selectedValidation;
    protected CustCoversheet? selectedCover;
    protected string? selectedFile;

    private string txtSearchRef = string.Empty;
    private bool pdfExists = false;

    private string? errorMessage;

    private async Task SearchRef()
    {
        try
        {
            errorMessage = string.Empty;
            selectedValidation = await loService.GetValidationRecord(txtSearchRef);
            selectedCover = await loService.GetEcover(txtSearchRef);
            pdfExists = !string.IsNullOrWhiteSpace(docService.GetFirstDocument(txtSearchRef));
            StateHasChanged();
            Logger.LogInformation("Fetched LO Record and Validation Record for reference {Reference}", txtSearchRef);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching LO Record or Validation Record for reference {Reference}", txtSearchRef);
            selectedValidation = null;
            selectedCover = null;
            pdfExists = false;
        }// /documents/pdf/2907202510360972 and check HTTP 200 with Content-Type: application/pdf.
    }

    private async Task OnSaved(CustCoversheet args)
    {
        try
        {
           docService.RepairDocument(txtSearchRef);
        }
        catch(Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            txtSearchRef = string.Empty;
            await SearchRef();
        }
        
    }
    private async Task OnCancelled()
    {
        txtSearchRef = string.Empty;
        await SearchRef();
    }

    private async Task OnRejected()
    {
        docService.RejectDocument(txtSearchRef);
        txtSearchRef = string.Empty;
        await SearchRef();
    }

    private void OnSelectedItemChanged(CustCoversheetValidation validation)
    {
        selectedValidation = validation;

        StateHasChanged();
    }

   public class DocumentResponse
    {
        public string? Message { get; set; }
    }

}