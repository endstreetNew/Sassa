@page "/check"
@using Sassa.Brm.Health
@inject DailyCheck check
@inject SessionService session
@inject IAlertService toast
@inject TdwBatchService batchService
@inject IHttpClientFactory _httpClientFactory
@inject CSService csService
@inject IDbContextFactory<ModelContext> _brmcontextFactory
@inject IDbContextFactory<LoModelContext> _locontextFactory
@inject ILogger<Check> logger



<button class="btn btn-primary btn-sm active" @onclick="() => SaveReport()">Save Health check</button>
<button class="btn btn-primary btn-sm active" @onclick="() => TdwEmailTest()">Tdw Email Test</button>

<div class="status-row">
    <StatusWidget ServiceName="BRM Api" Status="@isBrmApiHealthy"/>
    <StatusWidget ServiceName="CS WebService" Status="@isCsWsHealthy"/>
    <StatusWidget ServiceName="CS Database" Status="@isCsDbHealthy"/>
    <StatusWidget ServiceName="BRM Database" Status="@isBrmDbHealthy"/>
    <StatusWidget ServiceName="LO Database" Status="@isLoDbHealthy"/>
</div>

<hr />
<ErrorLog/>

@* @((MarkupString)check.GenerateHealthCheckReport(session.session.Name, 10, DateTime.Now))
 *@
    @code {
        [Inject] IWebHostEnvironment? Env { get; set; }

        private bool isBrmApiHealthy = false; // Replace with actual health check logic
        private bool isCsWsHealthy = false; // Replace with actual health check logic
        //Dbs
        private bool isBrmDbHealthy = false; // Replace with actual health check logic
        private bool isLoDbHealthy = false;
        private bool isCsDbHealthy = false;
        private bool isSocpenDbHealthy = false;

        protected override async Task OnInitializedAsync()
        {
            try
            {
                var client = _httpClientFactory.CreateClient("BrmApi");
                var response = await client.GetAsync("ApplicationV2/healthcheck");
                isBrmApiHealthy = response.IsSuccessStatusCode;
            }
            catch
            {
                isBrmApiHealthy = false;
            }
            isCsWsHealthy = await csService.CheckService();
            isCsDbHealthy = await csService.CheckDBConnection();
            using var brmctx = _brmcontextFactory.CreateDbContext();
            isBrmDbHealthy = await brmctx.DcBoxTypes.AsNoTracking().CountAsync() == 18;
            using var loctx = _locontextFactory.CreateDbContext();
            isLoDbHealthy = ((await loctx.CustCoversheetValidations.FindAsync("2907202508110947")) != null);

        }

    public async Task SaveReport()
    {
        try
        {
            await check.WriteDailyReport(session.session.Name, 10, DateTime.Now);
            toast.Success("Healthcheck saved.");
        }
        catch
        {
            toast.Error("Healthcheck already saved.");
        }
    }

    public void TdwEmailTest()
    {
        try
        {
            if (Env == null)
            {
                toast.Error("Environment not set.");
                return;
            }
            batchService.SendTdwMailTest(Path.Combine(Env.WebRootPath, "TestFile.csv"));
            toast.Success("TestMail sent please check the log for any error.");
        }
        catch(Exception ex)
        {
            logger.LogError(ex, "Error in Email client test");
            toast.Error("Error consumed in Email client...");
        }
    }

}
