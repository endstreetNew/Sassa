@inject IChatService ChatService

@if (null != _users)
{
    if (_users.Count() > 5)
    {
        <h5>Users(@_users.Count())</h5>
    }
    else
    {
        <ul>
        @foreach (var user in _users)
        {
            <li><p><span class='mr-1 status-@( (null != user.Client) ? "online" : "offline")'><i class="fa fa-user"></i></span>@user.Username</p></li>
        }
        </ul>
    }
}

@code {
    private IEnumerable<User> _users = new List<User>();
    protected override void OnInitialized()
    {
        ChatService.UserLoggedIn += OnUserLoggedIn;
        ChatService.UserLoggedOut += OnUserLoggedOut;
        _users = this.ChatService.GetAllUsers();
    }

    private async void OnUserLoggedIn(object sender, UserLoginEventArgs args)
    {
        _users = this.ChatService.GetAllUsers();
        await InvokeAsync(StateHasChanged);
    }

    private async void OnUserLoggedOut(object sender, UserLogoutEventArgs args)
    {
        _users = this.ChatService.GetAllUsers();
        await InvokeAsync(StateHasChanged);
    }

    private void Dispose()
    {
        ChatService.UserLoggedIn -= OnUserLoggedIn;
        ChatService.UserLoggedOut -= OnUserLoggedOut;
    }
}