@inject IToastService toast
@inject SessionService sessionservice
@inject BRMDbService db
@inject QueryableDataService qdb
@inject StaticService sservice
@inject NavigationManager NavigationM
@inject IJSRuntime Js

@inject ReportDataService rd
@inject IDialogService dialogService

@using System.Text

<WidgetTitle title="@title" />
<br />
@if (editBatch)
{
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OnBack())" Title="Back">Back</FluentButton>
        <FluentTextField @bind-Value="@BrmBarCode" Placeholder="<Scan Barcode>" />
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => btnAddFileToBatch())" Title="Add File">Add File</FluentButton>
    </FluentStack>
    <FluentDataGrid Items="@files.AsQueryable()" TGridItem="DcFile" Pagination="@filePaginator">
        <PropertyColumn Width="130px" Property="@(p => p.UnqFileNo)" />
        <PropertyColumn Width="100px" Property="@(p => p.BrmBarcode)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Delete())" OnClick="@(() => btnRemoveItem(context.BrmBarcode,context.BatchNo))" Title="Remove" Disabled="@(selectedBatch.BatchStatus != "Open")" />
        </TemplateColumn>
        <PropertyColumn Width="130px" Property="@(p => p.ApplicantNo)" Sortable="true" />
        <PropertyColumn Width="130px" Property="@(p => p.FullName)" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.GrantType)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.RegType)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p =>((DateTime)(p.TransDate??DateTime.MinValue)).ToShortDateString())" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.MergeStatus)" Sortable="true" />

    </FluentDataGrid>
    <FluentPaginator State="@filePaginator" />
}
else
{
    <FluentStack Orientation="Orientation.Vertical" >
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentSelect TOption="String"
                      Label="Status filter"
                      Items="@sservice.GetBatchStatus("RMC").Values"
                      Id="rmc-batchstatus-listbox"
                      Width="200px"
                      Height="250px"
                      Placeholder="Make a selection..."
                      OptionValue="@(p => p)"
                      OptionText="@(p => p)"
                      @bind-Value="@filterStatus"
                      @onchange="FilterStatus" />
    </FluentStack>

        <FluentDataGrid Items="@DTBatch.AsQueryable()" TGridItem="DcBatch" Pagination="@batchPaginator">
            <PropertyColumn Width="130px" Property="@(p => p.BatchNo)" />
            <TemplateColumn Width="350px" Title="Actions">
                <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Edit())" OnClick="@(() => btnEditBatch(context))" Title="Edit" Disabled="@(!"RMCBatch|Received".Contains(context.BatchStatus))" />
                <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Clipboard())" OnClick="@(() => btnPrintBatch(context))" Title="View/Print" Disabled="@(context.BatchStatus == "Open")" />
                <FluentTextField @bind-Value="@context.BoxNo" Placeholder="<Tdw Box No>" Disabled="@(!"RMCBatch|Received".Contains(context.BatchStatus))" />
                <FluentNumberField @bind-Value="@context.MiniBox" Size="5" Placeholder="<Minibox No>" Disabled="@(!"RMCBatch|Received".Contains(context.BatchStatus))" />
                <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Add())" OnClick="@(() => btnAddBatchToBox(context))" Title="Add to Box" Disabled="@(!"RMCBatch|Received".Contains(context.BatchStatus))" />
                 </FluentStack>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.RegType)" Sortable="true" />
            <PropertyColumn Property="@(p => p.UpdatedByAd)" Sortable="true" />
            <PropertyColumn Property="@(p => p.UpdatedDate)" Sortable="true" />
            <PropertyColumn Property="@(p => p.BatchStatus)" Sortable="true" />
            <PropertyColumn Property="@(p => p.BatchComment)" Sortable="true" />
            <PropertyColumn Property="@(p => p.NoOfFiles)" Sortable="true" />
        </FluentDataGrid>
        <FluentPaginator State="@batchPaginator" />
    </FluentStack>
}

@code {
    protected List<DcBatch> DTBatch { get; set; } = new();
    protected List<DcFile> files { get; set; } = new();

    protected PaginationState filePaginator { get; set; } = new PaginationState();
    protected PaginationState batchPaginator { get; set; } = new PaginationState();

    protected DcBatch selectedBatch { get; set; } = new();
    protected Reboxing rebox = new Reboxing();
    protected string filterStatus = "";

    protected string title = "";

    protected bool editBatch;

    protected string BrmBarCode = "";

    protected override async Task OnInitializedAsync()
    {
        filterStatus = "";
        title = $"Batches for {@sessionservice.session.Office.OfficeName}";
        filterStatus = "";
        try
        {
            DTBatch = await qdb.GetBatches(filterStatus);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }


    }

    protected async Task FilterStatus(ChangeEventArgs args)
    {
        filterStatus = args.Value?.ToString() ?? "";
        try
        {
            DTBatch = await qdb.GetBatches(filterStatus);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task btnCloseBatch(DcBatch batch)
    {
        selectedBatch = batch;
        var confirmMessage = $"Are you Sure you want to close {@selectedBatch.BatchNo} ?";
        DialogParameters parameters = new()
            {
                PrimaryAction = "Ok",
                Height = "230px",
                Width = "450px",
                Title = $"Confirm close batch {@selectedBatch.BatchNo} .",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };
        IDialogReference dialog = await dialogService.ShowDialogAsync<ConfirmContent>(confirmMessage, parameters);
        var result = await dialog.Result;
        try
        {

            if (selectedBatch.BatchNo != 0) await db.SetBatchStatus(selectedBatch.BatchNo, "Closed");

            DTBatch = await qdb.GetBatches(filterStatus);
            toast.ShowSuccess($"Batch #{selectedBatch.BatchNo} Closed.");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    protected async Task btnEditBatch(DcBatch batch)
    {
        selectedBatch = batch;
        files = await qdb.GetAllFilesByBatchNoQuery(batch.BatchNo);
        editBatch = true;
    }
    protected async Task btnAddBatchToBox(DcBatch batch)
    {
        try
        {

            if (batch.MiniBox < 1 || string.IsNullOrEmpty(batch.BoxNo)) throw new Exception($"Invalid Box or MiniBox.");
            var OfficeConfirmationMessage = $"This function will move files to a new box even if the file is currently boxed.{Environment.NewLine}Are you sure you want to continue ?";
            DialogParameters parameters = new()
                {
                    PrimaryAction = "Ok",
                    Height = "230px",
                    Width = "450px",
                    Title = $"Rebox boxed files.",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                };
            IDialogReference dialog = await dialogService.ShowDialogAsync<ConfirmContent>(OfficeConfirmationMessage, parameters);
            var result = await dialog.Result;
            if (result.Cancelled)
            {
                toast.ShowInfo("Operation cancelled by user.");
                return;
            }
            switch (batch.RegType)
            {
                case ("LC-MAIN"):
                    rebox.RegType = "13";
                    break;
                case ("LC-ARCHIVE"):
                    rebox.RegType = "18";
                    break;
                case ("MAIN"):
                    rebox.RegType = "1";
                    break;
                case ("ARCHIVE"):
                    rebox.RegType = "14";
                    break;
                default:
                    rebox.RegType = "1";
                    break;

            }
            rebox.BoxNo = batch.BoxNo.ToUpper().Trim();
            if (await db.IsBoxLocked(rebox.BoxNo))
            {
                throw new Exception("Can't add batch to locked box!");
            }
            rebox.BatchNo = batch.BatchNo;
            rebox.MiniBox = batch.MiniBox;
            List<string> barcodes = await db.GetBatchBarcodes((decimal)rebox.BatchNo);

            rebox.SelectedType = rebox.RegType;
            rebox.MisFileNo = string.Empty;
            rebox.NewBarcode = string.Empty;
            foreach (string brmBarCode in barcodes)
            {
                rebox.BrmBarcode = brmBarCode;
                await Rebox(rebox,true);
            }
            await db.SetBatchStatus(rebox.BatchNo, "Closed");
            filterStatus = "";
            DTBatch = await qdb.GetBatches(filterStatus);
            toast.ShowSuccess("Batch No " + rebox.BatchNo + " added to TDW box " + rebox.BoxNo + ".");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task Rebox(Reboxing rebox,bool force = false)
    {
        try
        {
            DcFile file = await db.GetReboxCandidate(rebox);
            if (string.IsNullOrEmpty(file.TdwBoxno) || force)
            {

                await db.Rebox(rebox, file);
            }
            rebox.BrmBarcode = string.Empty;
            rebox.MisFileNo = string.Empty;
            rebox.NewBarcode = string.Empty;
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    // protected async Task LoadBox(string boxNo)
    // {
    //     try
    //     {
    //         boxNo = rebox.BoxNo.ToUpper().Trim();

    //         rebox.BoxNo = boxNo;
    //         await Task.CompletedTask;
    //     }
    //     catch //(Exception ex)
    //     {
    //         toast.ShowError("Invalid Box no");
    //     }

    // }
    protected async Task btnRemoveItem(string brmBarCode,decimal? batchNo)
    {
        try
        {
            await db.RemoveFileFromBatch(brmBarCode,batchNo);
            files = await qdb.GetAllFilesByBatchNoQuery(selectedBatch.BatchNo);
            editBatch = files.Any();
            DTBatch = await qdb.GetBatches(filterStatus);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task btnAddFileToBatch()
    {
        try
        {
            if (BrmBarCode.Trim().Length != 8)
            { throw new Exception("Invalid BarCode."); }
            BrmBarCode = BrmBarCode.Trim().ToUpper();
            await db.AddFileToBatch(BrmBarCode, selectedBatch.BatchNo);
            files = await qdb.GetAllFilesByBatchNoQuery(selectedBatch.BatchNo);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }



    protected async Task OnBack()
    {
        DTBatch = await qdb.GetBatches(filterStatus);

        editBatch = false;
    }
    protected void chkSelectAll(ChangeEventArgs e)
    {
        var selected = (bool)e.Value!;
        foreach (DcBatch batch in DTBatch.Where(r => r.BatchStatus == "Open"))
        {
            batch.IsSelected = selected;
        }
    }

    protected void chkSelect(ChangeEventArgs e, DcBatch batch)
    {
        var selected = (bool)e.Value!;
        batch.IsSelected = selected;
    }

    protected async Task btnClose_Click()
    {
        foreach (DcBatch batch in DTBatch.Where(b => b.IsSelected))
        {
            if (batch.BatchNo != 0) await db.SetBatchStatus(batch.BatchNo, "Closed");
        }
        DTBatch = await qdb.GetBatches("Open");
        toast.ShowSuccess($"Selected batches Closed.");
    }

    protected async Task btnPrintBatch(DcBatch batch)
    {
        try
        {
            sservice.GetGrantTypes();

            List<DcFile> files = await db.GetAllFilesByBatchNo(batch.BatchNo);
            StringBuilder sb = new StringBuilder();

            sb.Append(BulkPrint.Header());
            sb.Append(BulkPrint.CreateBatchCover(files, sessionservice.session.Office.OfficeName, batch.BatchNo));
            sb.Append(BulkPrint.Footer());

            string FileName = sessionservice.session.Office.RegionCode + "-" + sessionservice.session.SamName.ToUpper() + "-" + "Batch_" + batch.BatchNo + "-" + DateTime.Now.ToShortDateString().Replace("/", "-") + "-" + DateTime.Now.ToString("HH-mm");//.Replace(":", "-");
            toast.ShowSuccess($"Batch cover :{batch.BatchNo} queued.");
            await rd.SaveHtmlReport(sb.ToString(), FileName);
            files.Clear();
            sb = new();
            await Js.InvokeVoidAsync("open", $"{NavigationM.BaseUri}batchcover/{batch.BatchNo}", "_blank");

        }
        catch //(Exception ex)
        {
            toast.ShowError($"Batch cover :{batch.BatchNo} error.");

        }


    }

}





