@inject Navigation Navigate
@inject NavigationManager Navigation
@inject IToastService toast
@inject SessionService sessionservice
@inject BRMDbService db
@inject IDialogService dialogService
@inject IJSRuntime JSRuntime


<div style="display: table; table-layout: fixed; width: 100%;">
    <div style="overflow-x: auto;">
        <FluentDataGrid Style="min-width: max-content;" Items="@DTBrm.AsQueryable()" TGridItem="Application" Pagination="@pagination">
    <PropertyColumn Width="130px" Property="@(p => p.Id)" />
    <TemplateColumn Title="Actions" >
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Cube())" Title="Batch" OnClick="@(() => btnBatch_Click(context))" Disabled="@(context.BatchNo > 0)"/>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Eye())" Title="View" OnClick="@(() => btnView_Click(context))"/>
        <FluentButton BackgroundColor="Red" Color="White" IconEnd="@(new Icons.Regular.Size12.Delete())" Title="Delete" OnClick="@(() => btnDelete_Click(context))" Disabled="@(!sessionservice.session.IsInRole("GRP_BRM_Monitoring"))"/>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Edit())" Title="Edit Barcode" OnClick="@(() => btnEditBarcode_Click(context))" Disabled="@(!sessionservice.session.IsInRole("GRP_BRM_Monitoring"))"/>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.ArrowDown())" Title="Merged Records" Disabled="@(!DTMerges.Where(b => b.Brm_Parent == context.Brm_Parent).Any())" OnClick="@(() => ShowChildren(context.Brm_BarCode))" />
    </TemplateColumn>
    <PropertyColumn Width="100px" Property="@(p => p.Brm_BarCode)" Sortable="true" />
    <PropertyColumn Width="130px" Property="@(p => p.ChildId)" Sortable="true" />
    <PropertyColumn Width="200px" Property="@(p => p.GrantName)" Sortable="true" />
    <PropertyColumn Width="130px" Property="@(p => p.Srd_No)" Sortable="true" />
    <PropertyColumn Width="100px" Property="@(p => p.Status)" Sortable="true" />
    <PropertyColumn Width="200px" Property="@(p => p.FullName)" />
    <PropertyColumn Width="100px" Property="@(p => p.AppDate)" Sortable="true" />
    <PropertyColumn Width="100px" Property="@(p => p.BatchNo)" Sortable="true" />
    <PropertyColumn Width="100px" Property="@(p => p.TDW_BOXNO)" Sortable="true" />
        <PropertyColumn Width="80px" Property="@(p => p.MiniBox)" Sortable="true" />
        <PropertyColumn Width="80px" Property="@(p => p.ARCHIVE_YEAR)" Sortable="true" />
    </FluentDataGrid>
    </div>
</div>
    <FluentPaginator State="@pagination" />
    <FluentDivider Orientation="Orientation.Vertical"></FluentDivider>
    @if (!string.IsNullOrEmpty(parentBrm))
    {
     <hr/>
    <span><strong>Merged records</strong></span>
    <hr />
        <FluentDataGrid Items="@DTMerges.Where(b => b.Brm_Parent == parentBrm).AsQueryable()" TGridItem="Application">
        <PropertyColumn Width="130px" Property="@(p => p.Id)" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Eye())" Title="View" OnClick="@(() => btnView_Click(context))" />
            <FluentButton BackgroundColor="Red" Color="White" IconEnd="@(new Icons.Regular.Size12.Delete())" Title="Delete" OnClick="@(() => btnDelete_Click(context))" Disabled="@(!sessionservice.session.IsInRole("GRP_BRM_Monitoring"))" />
        </TemplateColumn>
        <PropertyColumn Width="100px" Property="@(p => p.Brm_BarCode)" Sortable="true" />
        <PropertyColumn Width="130px" Property="@(p => p.ChildId)" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.GrantName)" Sortable="true" />
        <PropertyColumn Width="130px" Property="@(p => p.Srd_No)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.Status)" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.FullName)" />
        <PropertyColumn Width="100px" Property="@(p => p.AppDate)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.BatchNo)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.TDW_BOXNO)" Sortable="true" />
        <PropertyColumn Width="80px" Property="@(p => p.MiniBox)" Sortable="true" />
        <PropertyColumn Width="80px" Property="@(p => p.ARCHIVE_YEAR)" Sortable="true" />
    </FluentDataGrid>
    }


@code {
    [Parameter]
    public List<Application> DTBrm { get; set; } = new();
    [Parameter]
    public List<Application> DTMerges { get; set; } = new();
    [Parameter]
    public EventCallback<int> Changed { get; set; }

    protected bool showConfirmation;
    protected bool showEditBarcodeConfirmation;
    protected Application selectedApp = new();
    protected string parentBrm = "";

    protected string? NewBarCode;

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };



    protected async Task btnBatch_Click(Application app)
    {
        //Navigate.NavigateTo($"coversheet/{app.Brm_BarCode}");
        try
        {
            if (app.BatchNo > 0)
            {
                throw new Exception($"File {app.Brm_BarCode} already in batch {app.BatchNo}");
            };
            string batchType = app.Id.StartsWith("S") ? "SrdNoId" : app.AppStatus;
            decimal batchNo = await db.CreateBatchForUser(batchType);
            await db.AddFileToBatch(app.Brm_BarCode, batchNo);
            await Changed.InvokeAsync();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task btnView_Click(Application app)
    {
        //Navigate.NavigateTo($"coversheet/{app.Brm_BarCode}");
        try
        {
            await JSRuntime.InvokeVoidAsync("open", $"{Navigation.BaseUri}coversheet/{app.Brm_BarCode}", "_blank");
        }
        catch//(Exception ex)
        {

        }
    }
    protected async Task btnDelete_Click(Application app)
    {
        if (DTMerges != null && DTMerges.Where(b => b.Brm_Parent == app.Brm_BarCode).Any())
        {
            toast.ShowWarning("Please remove merged records first.");
        }
        else
        {
            selectedApp = app;
            var dialog = await dialogService.ShowDialogAsync<ConfirmDelete>("", new DialogParameters()
                {
                    Height = "340px",
                    Width = "550px",
                    Title = $"Confirm Delete BRM: {app.Brm_BarCode}",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                });

            var result = await dialog.Result;
            if (!result.Cancelled && result.Data != null)
            {
                if (selectedApp == null) throw new Exception("No record selected.");
                await db.RemoveBRM(selectedApp.Brm_BarCode, (string)result.Data);
                await Changed.InvokeAsync();
                StateHasChanged();
            }
        }
    }
    protected async Task btnEditBarcode_Click(Application app)
    {
        if (DTMerges != null && DTMerges.Where(b => b.Brm_Parent == app.Brm_BarCode).Any())
        {
            //maybe not
            toast.ShowWarning("Please remove merged records first.");
        }
        else
        {
            selectedApp = app;
            var dialog = await dialogService.ShowDialogAsync<EditBarcode>("", new DialogParameters()
                {
                    Height = "240px",
                    Width = "550px",
                    Title = $"Edit Barcode: {app.Brm_BarCode}",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                });

            var result = await dialog.Result;
            if (!result.Cancelled && result.Data != null)
            {
                if (selectedApp == null) throw new Exception("No record selected.");
                if (string.IsNullOrEmpty((string)result.Data) || ((string)result.Data).Trim().Length != 8) throw new Exception("Invalid Brm Barcode.");
                NewBarCode = ((string)result.Data).ToUpper().Trim();
                if (await db.checkBRMExists(NewBarCode))
                {
                    toast.ShowError("New Barcode Exists!");
                    return;
                }
                await db.EditBarCode(selectedApp, NewBarCode);
                await Changed.InvokeAsync();
            }
        }
    }
    protected void ShowChildren(string parent)
    {
        parentBrm = parent;
    }
}
