@inject BRMDbService db
@inject QueryableDataService qdb
@inject IToastService toast

<WidgetTitle Title="Picklists" />
<FluentStack Orientation="Orientation.Horizontal">
    <FluentCheckbox Label="Show requested by me." Value="@filterRequestUser" @onchange="@(e => RequestUserFilterChange(e))" />
    <FluentCheckbox Label="Show only in progress items." Value="@filterInProgress" @onchange="@(e => InProgressFilterChange(e))" />
    <FluentTextField Placeholder="<Search text>" Value="@SearchTxt" />
    <FluentButton Text="" OnClick="SearchPickList">Search picklist</FluentButton>
</FluentStack>

<FluentStack Orientation="Orientation.Horizontal">
    <FluentStack Orientation="Orientation.Vertical">
        <WidgetTitle Title="Picklists" />

        <FluentDataGrid Items="@pickLists.AsQueryable()" TGridItem="DcPicklist" Pagination="@picklistPaginator">
            <PropertyColumn Property="@(p => p.UnqPicklist)" Sortable="true" />
            <PropertyColumn Property="@(p => p.PicklistDate)" Sortable="true" />
            <PropertyColumn Property="@(p => p.RequestedByAd)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Status)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentButton Title="@context.nextStatus" Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Status())" OnClick="@(() => btnNextStatus_Click(context))" Disabled="@(context.Status == "Returned")"></FluentButton>
                <FluentButton Title="Items" Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Link())" OnClick="@(() => ItemClicked(context))" Disabled="@(context.Status == "Returned")"></FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator State="@picklistPaginator" />
    </FluentStack>
    <FluentStack Orientation="Orientation.Vertical">
        <WidgetTitle Title="Picklist items" />
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField Placeholder="<Scan barcode>" Value="@BrmBarCode" />
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Status())" Title="Receive item" OnClick="@(() => ItemReceived_Click(BrmBarCode))"></FluentButton>
        </FluentStack>
        <FluentDataGrid Items="@items.AsQueryable()" TGridItem="DcPicklistItem" Pagination="@itemsPaginator">
            <PropertyColumn Property="@(p => p.UnqPicklist)" />
            <PropertyColumn Property="@(p => p.BrmNo)" />
            <PropertyColumn Property="@(p => p.IdNumber)" />
            <PropertyColumn Property="@(p => p.Firstname)" />
            <PropertyColumn Property="@(p => p.GrantType)" />
            <PropertyColumn Property="@(p => p.Status)" />
            <TemplateColumn Title="Action">
                <FluentButton Title="@context.nextStatus" IconEnd="@(new Icons.Regular.Size12.Status())" Appearance="Appearance.Accent" OnClick="@(() => btnItemStatus_Click(context.PicklistItemId))"></FluentButton>
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator State="@itemsPaginator" />
        }
    </FluentStack>



</FluentStack>


@code {
    protected List<DcPicklist> pickLists = new();
    protected List<DcPicklistItem> items = new();

    protected PaginationState picklistPaginator = new PaginationState() { ItemsPerPage = 10 };
    protected PaginationState itemsPaginator = new PaginationState() { ItemsPerPage = 10 };

    protected string SearchTxt = "";

    bool filterRequestUser = false;
    bool filterInProgress = false;

    string UnqPickList = "";
    string BrmBarCode = "";

    int itempage = 1;
    int page = 1;

    protected override async Task OnInitializedAsync()
    {
        await LoadPickList();
    }

    protected async Task RequestUserFilterChange(ChangeEventArgs e)
    {
        filterRequestUser = (bool)e.Value!;
        await LoadPickList();
    }
    protected async Task InProgressFilterChange(ChangeEventArgs e)
    {
        filterInProgress = (bool)e.Value!;
        await LoadPickList();
    }


    protected async Task btnNextStatus_Click(DcPicklist p)
    {
        await db.ChangePickListStatus(p);
        await LoadPickList();
        toast.ShowInfo("PickList " + p.nextStatus);
    }

    protected async Task ReceivePickList()
    {
        try
        {
            if (string.IsNullOrEmpty(UnqPickList))
            {
                throw new Exception("Invalid Picklist #.");
            }
            UnqPickList = UnqPickList.Trim();
            await db.ReceivePickList(UnqPickList);
            await LoadPickList();
            toast.ShowInfo("PickList received.");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task SearchPickList()
    {
        try
        {
            if (string.IsNullOrEmpty(SearchTxt))
            {
                throw new Exception("Invalid search text.");
            }
            pickLists = await qdb.SearchPickLists(SearchTxt);

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task LoadPickList()
    {
        pickLists = await qdb.GetPickLists(filterRequestUser, filterInProgress);

    }
    protected async Task OnPaged(int _page)
    {
        page = _page;
        await LoadPickList();

    }

    protected async Task ItemClicked(DcPicklist item)
    {
        UnqPickList = item.UnqPicklist;
        if (string.IsNullOrEmpty(UnqPickList)) return;
        items = await qdb.GetPicklistItems(UnqPickList);
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    if (string.IsNullOrEmpty(UnqPickList)) return;
    //    items = await db.GetPicklistItems(UnqPickList, itempage);
    //}
    protected async Task OnItemsPaged(int _page)
    {
        itempage = _page;
        items = await qdb.GetPicklistItems(UnqPickList);

    }
    protected async Task btnItemStatus_Click(decimal itemId)
    {
        await db.SetStatusPickListItem(itemId);
        items = await qdb.GetPicklistItems(UnqPickList);
        await LoadPickList();
        toast.ShowInfo("Item status changed.");
        ////if (db.IsAllItemsStatus(UnqPickList,"Received"))
        ////{
        ////    toast.ShowInfo("All Items received for this Picklist!");
        ////}
        ////else
        ////{

        ////}

    }
    protected async Task ItemReceived_Click(string BrmBarcode)
    {
        if (string.IsNullOrEmpty(BrmBarcode)) return;
        BrmBarcode = BrmBarcode.Trim();
        if (!await db.SetPickListItemStatus(BrmBarcode, "Received"))
        {
            toast.ShowInfo("Item not found.");
            return;
        }
        items = await qdb.GetPicklistItems(UnqPickList);
        await LoadPickList();
        toast.ShowInfo("Item status changed.");

    }
    }
