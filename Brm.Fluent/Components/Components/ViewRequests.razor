@inject SessionService sessionservice
@inject BRMDbService db
@inject QueryableDataService qdb
@inject StaticService sservice
@inject IToastService toast

<WidgetTitle Title ="View Requests" Loading ="loading"/>
<FluentStack Orientation="Orientation.Horizontal">

    <FluentCheckbox Label="Show my requests" @bind-Value="@filterUser" @onchange="@(e => UserFilterChange(e))"></FluentCheckbox>
    <FluentCheckbox Label="Show my office requests" @bind-Value="@filterOffice" @onchange="@(e => OfficeFilterChange(e))"></FluentCheckbox>
    <FluentSelect TOption="String"
                  Items="@StaticDataService.RequestStatus.Keys"
                  Id="appstatus-listbox"
                  Width="200px"
                  Height="250px"
                  Placeholder="<Request Status>"
                  OptionValue="@(p => p)"
                  OptionText="@(p => StaticDataService.RequestStatus[p])"
                  @onchange="@(e => StatusFilterChange(e))" />
    <FluentSelect TOption="DcReqCategoryType"
                  Items="@StaticDataService.RequestCategoryTypes"
                  Id="appstatus-listbox"
                  Width="240px"
                  Height="250px"
                  Placeholder="<Request Category Type>"
                  OptionValue="@(p => p.TypeId.ToString())"
                  OptionText="@(p => p.TypeDescr)"
                  @onchange="@(e => ReasonFilterChange(e))" />
    <FluentNumberField Placeholder="<# of Files>" @bind-Value="requestCount" Disabled="@(!sessionservice.session.IsRmc() || !sessionservice.session.IsInRole("GRP_BRM_Supervisors"))" />
    <FluentButton Appearance="Appearance.Accent" @onclick="btnTDWRequest_Click" Disabled="@(!sessionservice.session.IsRmc() || !sessionservice.session.IsInRole("GRP_BRM_Supervisors"))">Request</FluentButton>

</FluentStack>

<FluentStack Orientation="Orientation.Horizontal">
                <PieChart PieData="@piedata"></PieChart>
                <PieChart PieData="@regiondata"></PieChart>
</FluentStack>

    <FluentDataGrid Items="@fileRequests.AsQueryable()" TGridItem="DcFileRequest" Pagination="@requestPaginator">
        <PropertyColumn Property="@(p => p.IdNo)" Sortable="true" />
        <PropertyColumn Property="@(p => p.RequestedOfficeId)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Reason)" Sortable="true" />
        <PropertyColumn Property="@(p => p.RequestedDate)" Sortable="true" />
        <PropertyColumn Property="@(p => p.GrantType)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Name)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Surname)" Sortable="true" />
        <PropertyColumn Property="@(p => p.RequestedByAd)" Sortable="true" />
        <PropertyColumn Property="@(p => p.Status)" Sortable="true" />
    </FluentDataGrid>
    <FluentPaginator State="@requestPaginator" />

@code {

    List<DcFileRequest> fileRequests = new();
    bool filterUser = false;
    bool filterOffice = true;
    string filterStatus = "";
    string filterReason = "";

    PieData piedata = new();
    PieData regiondata = new();

    PaginationState requestPaginator = new PaginationState() { ItemsPerPage = 10 };

    bool loading;

    int requestCount = 500;

    protected override async Task OnInitializedAsync()
    {
        await LoadRequests();
    }
    #region Requests

    protected async Task UserFilterChange(ChangeEventArgs e)
    {
        filterUser = (bool)e.Value!;
        await LoadRequests();
    }

    protected async Task OfficeFilterChange(ChangeEventArgs e)
    {
        filterOffice = (bool)e.Value!;
        await LoadRequests();
    }

    protected async Task StatusFilterChange(ChangeEventArgs e)
    {
        filterStatus = (string)e.Value!;
        await LoadRequests();
    }
    protected async Task ReasonFilterChange(ChangeEventArgs e)
    {
        filterReason = (string)e.Value!;
        await LoadRequests();
    }
    protected async Task LoadRequests()
    {
        loading = true;
        piedata = db.GetRequestPieData();
        regiondata = db.GetRequestPieData(sessionservice.session.Office.RegionId);
        fileRequests = await qdb.GetFileRequests(filterUser, filterOffice, filterStatus, filterReason);
        loading = false;

    }

    protected void chkSelectAll(ChangeEventArgs e)
    {
        var selected = (bool)e.Value!;
        foreach (DcFileRequest req in fileRequests.Where(r => r.Status == "TDWPicklist"))
        {
            req.isSelected = selected;
        }
    }
    protected async Task btnTDWRequest_Click()
    {
        try
        {
            //List<SelectedRequest> selectedIds = GetSelectedRequests();
            if (requestCount ==0) throw new Exception("No items selected for TDW request.");
            //Set SENT_TDW
            await db.SendTDWRequestsPerRegion(requestCount);
            toast.ShowSuccess("Selected Request(s) sent to TDW.");
            await LoadRequests();
        }
        catch (Exception ex)
        {
            if (ex.Message.Contains("in progress"))
            {
                toast.ShowWarning(ex.Message);
            }
            else
            {
                toast.ShowError(ex.Message);
            }

        }
    }

    #endregion
}
