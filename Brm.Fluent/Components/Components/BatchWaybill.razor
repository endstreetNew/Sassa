@inject IToastService toast
@inject SessionService sessionservice
@inject BRMDbService db
@inject Navigation Navigate

@inject IDialogService dialogService

<WidgetTitle Title="Batch waybills"/>
<FluentDataGrid Items="@waybills.AsQueryable()" TGridItem="Waybill" Pagination="@waybillPaginator">
    <PropertyColumn Property="@(p => p.BrmWaybill)" Sortable="true" />
    <PropertyColumn Property="@(p => p.WaybillNo)" Sortable="true" />

    <TemplateColumn Title="Actions">
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Eye())" OnClick="@(() => btnDispatch_Click(context))" Title="@(context.Status == "Closed" ? "Dispatch" : "Reprint")" Disabled="@(sessionservice.session.IsRmc())"/>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Checkmark())" OnClick="@(() => btnReceive_Click(context))" Title="Edit" Disabled="@(!sessionservice.session.IsRmc())"/>
    </TemplateColumn>
    
    <PropertyColumn Property="@(p => p.UpdatedByAd)" Sortable="true" />
    <PropertyColumn Property="@(p => p.UpdatedDate)" Sortable="true" />
    <PropertyColumn Property="@(p => p.Status)" Sortable="true" />
    <PropertyColumn Property="@(p => p.NoOfBatches)" Sortable="true" />
    <PropertyColumn Property="@(p => p.NoOfFiles)" Sortable="true" />
</FluentDataGrid>
<FluentPaginator State="@waybillPaginator" />


@code {

    protected List<Waybill> waybills = new();
    protected Waybill? selectedWaybill;

    PaginationState waybillPaginator = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnInitializedAsync()
    {
        waybills = await db.GetBatchWaybills();
        sessionservice.session.BookMark.BoxingTab = 2;
    }


    protected async Task btnDispatch_Click(Waybill w)
    {
        selectedWaybill = w;
        if (w.Status == "Closed")
        {
            DialogParameters parameters = new()
                {
                    Title = $"Capture New Brm Record",
                    // PrimaryAction = "Ok",
                    // PrimaryActionEnabled = false,
                    SecondaryAction = "Cancel",
                    // Height = "55%",
                    TrapFocus = true,
                    Modal = true,
                    PreventScroll = true
                };
            IDialogReference dialog = await dialogService.ShowDialogAsync<TdwDispatchContent>(w, parameters);
            var result = await dialog.Result;
            if (result.Cancelled || result.Data is null) return;
            Waybill? capturedWb = result.Data as Waybill;
            if (capturedWb == null) return; //huh?
            await db.DispatchWaybill(capturedWb.BrmWaybill, capturedWb.WaybillNo);
            Navigate.NavigateTo($"transportcover/{capturedWb.BrmWaybill}");
        }
        else
        {
            Navigate.NavigateTo($"transportcover/{selectedWaybill.BrmWaybill}");
        }

    }

    protected async Task btnReceive_Click(Waybill w)
    {
        selectedWaybill = w;
        var ConfirmationMessage = $"Confirm receipt of Waybill {w.WaybillNo}"; 
        DialogParameters parameters = new()
            {
                PrimaryAction = "Ok",
                Height = "230px",
                Width = "450px",
                Title = $"Confirm Region change.",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };
        IDialogReference dialog = await dialogService.ShowDialogAsync<ConfirmContent>(ConfirmationMessage, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            await OnReceiptOk();
        }

    }

    protected async Task OnReceiptOk()
    {
        try
        {
            if (selectedWaybill == null) throw new Exception("No waybill selected.");
            await db.ReceiveWaybill(selectedWaybill.BrmWaybill, "Received");
            waybills = await db.GetBatchWaybills();
            toast.ShowSuccess($"Transport Waybill Received.");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
}
