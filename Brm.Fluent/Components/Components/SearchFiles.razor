@inject BRMDbService db
@inject CSService cs
@inject IToastService toast
@inject IWebHostEnvironment _env
@inject StaticService sservice
@inject IDialogService dialogService

<WidgetTitle Title="Search Documents" />
<FluentStack>
    <FluentTextField @bind-Value="sm.IdNo" Placeholder="<Enter Id>" />
    <FluentTextField @bind-Value="sm.BrmNo" Placeholder="<Enter Brm Barcode>" />
    <FluentTextField @bind-Value="sm.SrdNo" Placeholder="<Enter Srd No>" />
    <FluentTextField @bind-Value="sm.ClmNo" Placeholder="<Enter Claim No>" />
    <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Search())" Title="Search" OnClick="@(async () => await btnSearch_Click())"></FluentButton>
</FluentStack>

@if (showpreview)
{

    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton Appearance="Appearance.Outline" OnClick="@(() => { showpreview = false; })">Back</FluentButton>
            <FluentButton Appearance="Appearance.Outline" IconEnd="@(new Icons.Regular.Size16.ArrowLeft())" OnClick="FirstPage"></FluentButton>
            <FluentButton Appearance="Appearance.Outline" IconEnd="@(new Icons.Regular.Size16.ArrowPrevious())" OnClick="PreviousPage"></FluentButton>
            <FluentButton Appearance="Appearance.Outline" IconEnd="@(new Icons.Regular.Size16.ArrowNext())" OnClick="NextPage"></FluentButton>
            <FluentButton Appearance="Appearance.Outline" IconEnd="@(new Icons.Regular.Size16.ArrowRight())" OnClick="LastPage"></FluentButton>
            <FluentSpacer/>
        </FluentStack>
        <hr />
        <embed src="CSImages/@viewSource" style="width:100%" height="800" type="application/pdf" />
    </FluentStack>
}
else
{
    <FluentStack Orientation="Orientation.Vertical">
        <WidgetTitle Title="Documents"/>
        @if (node != null)
        {

            <PdfBrowser Node="node" Preview="OnPreview"></PdfBrowser>

        }
    <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton Appearance="Appearance.Accent" OnClick="btnRequest_Click">Request Physical file(s)</FluentButton>
            <FluentButton Appearance="Appearance.Accent" OnClick="@(async () => await btnSearch_Click())">Refresh</FluentButton>
    </FluentStack>
    </FluentStack>
}

@code {


    SearchModel sm = new SearchModel();
    Dictionary<string, string> Tdwgrants = new();
    Dictionary<string, string> folderItems = new();
    // bool showRequestModal = false;
    bool showpreview = false;
    string viewSource = "";
    int viewIndex;
    FileTreeNode? node;
    List<FileTreeNode> files = new();

    protected async Task btnRequest_Click()
    {
        try
        {
            await Validate();
            Tdwgrants = await db.GetTDWGrants(sm.IdNo);
            if (Tdwgrants.Count < 1)
            {
                toast.ShowWarning("TDW has no records for this applicant.");
            }
            else
            {
                await ShowRequestModal();
            }
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task ShowRequestModal()
    {
        RequestModel request = new RequestModel(){IdNo = sm.IdNo};

        DialogParameters parameters = new()
                {
                Title = $"Request file(s) for{sm.IdNo}.",
                    // PrimaryAction = "Ok",
                    // PrimaryActionEnabled = false,
                    SecondaryAction = "Cancel",
                    // Height = "55%",
                    TrapFocus = true,
                    Modal = true,
                    PreventScroll = true
                };
        IDialogReference dialog = await dialogService.ShowDialogAsync<FileRequestDialog>(request, parameters);
        var result = await dialog.Result;
        if (result.Cancelled || result.Data is null) return;
        RequestModel capturedWb = (result.Data as RequestModel)!;
        if (capturedWb == null) return; //huh?
        capturedWb.StakeHolder = StaticDataService.StakeHolders.Where(s => s.DepartmentId == capturedWb.Category).First().StakeholderId;

        int insertedCount = await db.AddFileRequest(capturedWb);
        toast.ShowSuccess("Request processed");

    }

    protected async Task btnSearch_Click()
    {
        try
        {
            await Validate();
            toast.ShowInfo("Searching document Images..");
            await cs.GetCSDocuments(sm.IdNo);
            folderItems = cs.GetFolderList(sm.IdNo);
            node = await db.GetCSFiles(sm.IdNo);
            files = node.GetFiles();
            if (files.Count == 0)
            {
                toast.ShowWarning("No document Images found.");
            }

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    private async Task Validate()
    {
        if (string.IsNullOrEmpty(sm.IdNo) && string.IsNullOrEmpty(sm.BrmNo) && string.IsNullOrEmpty(sm.ClmNo) && string.IsNullOrEmpty(sm.SrdNo))
        {
            throw new Exception("Please enter a search value in at least one of the fields.");
        }
        if (!string.IsNullOrEmpty(sm.BrmNo))
        {
            sm.BrmNo = sm.BrmNo.ToUpper();
        }
        if (string.IsNullOrEmpty(sm.IdNo))
        {
            sm.IdNo = await db.GetSearchId(sm);
            if (string.IsNullOrEmpty(sm.IdNo))
            {
                throw new Exception("No Id To Search On.");
            }
        }
        if (sm.IdNo.Contains("S"))
        {
            throw new Exception("Cant Search CS with temp Id");
        }
    }

    protected void OnPreview(string fileName)
    {

        try
        {
            viewSource = fileName;

            showpreview = true;
        }
        catch
        {
            //what??
        }
    }
    //DocumentPager
    void FirstPage()
    {
        viewIndex = 1;
        GotoNewPage();
    }

    void LastPage()
    {
        viewIndex = files.Count();
        GotoNewPage();

    }
    void NextPage()
    {
        viewIndex++;
        if (viewIndex > files.Count()) viewIndex = 1;

        GotoNewPage();
    }

    void PreviousPage()
    {
        viewIndex--;
        if (viewIndex < 1) viewIndex = files.Count();
        GotoNewPage();
    }

    void GotoNewPage()
    {
        if (files.Any())
        {
            viewSource = files.Skip(viewIndex - 1).First().NodeName!;
        }
    }

}
