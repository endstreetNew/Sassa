@inject Navigation Navigate
@inject SessionService sessionservice
@inject BRMDbService db
@inject StaticService sservice
@inject ProgressService og
@inject ReportDataService rs
@inject IToastService toast

<br/>
<div>
@if(!IsDashboardLoaded)
{
        <FluentStack Orientation="Orientation.Vertical">
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentLabel>Offic Progress</FluentLabel>
                <FluentButton Appearance="Appearance.Accent" @onclick="btnLoadProgress_Click">Load Detail</FluentButton>
            </FluentStack>
            <WidgetTitle Title="Filter Options" />
                <FluentSelect TOption="KeyValuePair<string,ReportPeriod>" Items="StaticDataService.QuarterList().ToList()" @bind-Value="@fromQuarter" OptionValue="@(p => p.Key)" OptionText="@(p => p.Key)" Placeholder="From Quarter" />
                <FluentSelect TOption="KeyValuePair<string,ReportPeriod>" Items="StaticDataService.QuarterList().ToList()" @bind-Value="@toQuarter" OptionValue="@(p => p.Key)" OptionText="@(p => p.Key)" Placeholder="To Quarter" />
                <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetRegions().ToList()" Placeholder="<Region>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@office.RegionId" />
                <FluentSelect Height="300px" TOption="KeyValuePair<string,string>" Items="@(sservice.GetReportOffices(office.RegionId).ToList())" Placeholder="<Office>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@office.OfficeId" />
            </FluentStack>
    }
    else
    {
                 <div class="row">
                    <span><strong>Progress for Region: @office.RegionName Office: @office.OfficeName</strong></span>
                </div>
                 <div class="row">
                    <span><strong>Period: @fromQuarter  to @toQuarter</strong></span>
                </div>
                <div class="row">
                <div class="col-12">

                     <table class="table table-sm" style="font-size:x-small;">
                        <thead>
                            <tr class="table-header">
                                <th scope="col"></th>
                                <th scope="col">Quarter</th>
                                <th scope="col">Captured</th>
                                <th scope="col">% Captured</th>
                                <th scope="col">% Missing</th>
                                <th scope="col">Scanned</th>
                                <th scope="col">Loaded in CS</th>
                                <th scope="col">At TDW</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (Brm.Fluent.Components.Report.QuarterDetail u in quarters)
                            {
                                <tr>
                                    <td style="cursor: pointer;font-size:12px;font-weight:bold;"><span class="@expandedClass" aria-hidden="true" @onclick="@(() => ExpandSummary(u))">@(u.IsExpanded ? "-" : "+")</span></td>
                                    <td>@u.Quarter.FinancialQuarter</td>
                                    <td>@u.Captured</td>
                                    <td>@u.PercentageCaptured</td>
                                    <td>@u.PercentageMissing</td>
                                    <td>@u.Scanned</td>
                                    <td>@u.CsLoaded</td>
                                    <td>@u.TdwSent</td>
                                </tr>
                                if(u.IsExpanded)
                                {
                                   <tr>
                                        <td colspan="9">
                                            <table class="table table-sm" style="font-size:x-small;">
                                            <thead>
                                                <tr class="table-header">
                                                    <th scope="col"></th>
                                                    <th scope="col">MONTH</th>
                                                    @*<th scope="col">SOCPEN</th>*@
                                                    <th scope="col">BRM</th>
                                                    <th scope="col">SCAN</th>
                                                    <th scope="col">ContentServer</th>
                                                </tr>
                                            </thead>
                                            <tbody>

                                                @foreach (var d in u.MonthDetail)
                                                {
                                                    <tr>
                                                        <td style="cursor: pointer;font-size:12px;font-weight:bold;"><span class="@expandedClass" aria-hidden="true" @onclick="@(() => Expand(d))">@(d.IsExpanded ? "-" : "+")</span></td>
                                                        <td>@(new DateTime(2010, d.Month, 1).ToString("MMM", CultureInfo.InvariantCulture))</td>
                                                        @*<td>@d.Total</td>*@
                                                        <td>@d.Captured</td>
                                                        <td>@d.Scanned</td>
                                                        <td>@d.CsLoaded</td>
                                                    </tr>
                                                    if(d.IsExpanded)
                                                    {
                                                       <tr>
                                                            <td colspan="6">
                                                                <DailyProgressDetail DayDetail="@d.DayDetail"></DailyProgressDetail>
                                                            </td>
                                                        </tr>
                                                    }

                                                }
                                            </tbody>
                                        </table>
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
                <br/>
            </div>
            <div class="row">
                <div class="col">
                <button class="btn btn-primary active" @onclick="btnResetProgress_Click">Close Dashboard</button>
                </div>
            </div>

}
</div>

@code {
    protected UserOffice office = new();
    string fromQuarter = "";
    string toQuarter ="";
    //string fromMonth;
    //string toMonth;
    bool IsDashboardLoaded;
    ReportPeriod period = new ReportPeriod { FromDate = DateTime.Now.AddMonths(-1), ToDate = DateTime.Now };
    string expandedClass = "";//"oi caret-bottom";
    string expandedText = "+";

    List<Brm.Fluent.Components.Report.QuarterDetail> quarters = new();

    protected override void OnInitialized()
    {
        office = sessionservice.session.Office;
        IsDashboardLoaded = false;
    }

    protected async Task btnLoadProgress_Click()
    {
        try
        {
            //DateTime from = new DateTime(int.Parse(fromMonth.Split('|')[1]), int.Parse(fromMonth.Split('|')[0]), 1);
            //DateTime to = new DateTime(int.Parse(toMonth.Split('|')[1]), int.Parse(toMonth.Split('|')[0]), DateTime.DaysInMonth(int.Parse(toMonth.Split('|')[1]), int.Parse(toMonth.Split('|')[0])));
            //var monthYear = fromMonth.Split('|');
            //int month = int.Parse(monthYear[0]);
            //int year = int.Parse(monthYear[1]);
            //await Task.Delay(100);
            if (string.IsNullOrEmpty(office.OfficeId))
            {
                toast.ShowInfo($"Please select an office for this dashboard.");
                return;
            }
            else
            {
                office.OfficeName = sservice.GetOfficeName(office.OfficeId);
            }
            if (string.IsNullOrEmpty(fromQuarter) || string.IsNullOrEmpty(toQuarter))
            {
                toast.ShowInfo($"Please check your period filter, it is invalid");
                return;
            }
            await Task.Delay(100);
            toast.ShowInfo($"Progress Dashboard loading...");
            quarters = await og.GetCaptureProgress(StaticDataService.QuarterList()[fromQuarter],StaticDataService.QuarterList()[toQuarter], office);
            IsDashboardLoaded = true;
        }
        catch
        {
            toast.ShowInfo($"Please check your Filter, it is invalid");
        }
    }

    protected void btnResetProgress_Click()
    {
        IsDashboardLoaded = false;
    }

    protected void ExpandSummary(Brm.Fluent.Components.Report.QuarterDetail u)
    {
        u.IsExpanded = !u.IsExpanded;
       // expandedClass = u.IsExpanded ? "oi oi-caret-bottom" : "oi oi-caret-right";
        expandedText = u.IsExpanded ? "-" : "+";
    }

    protected void Expand(Brm.Fluent.Components.Report.MonthDetail u)
    {
        u.IsExpanded = !u.IsExpanded;
       // expandedClass = u.IsExpanded ? "oi oi-caret-bottom" : "oi oi-caret-right";
        expandedText = u.IsExpanded ? "-" : "+";
    }
}
