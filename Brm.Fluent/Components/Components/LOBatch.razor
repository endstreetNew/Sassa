@inject IToastService toast
@inject SessionService sessionservice
@inject BRMDbService db
@inject QueryableDataService qdb
@inject StaticService sservice
@inject NavigationManager NavigationM
@inject IJSRuntime Js

@inject ReportDataService rd

@inject IDialogService dialogService

@using System.Text

<WidgetTitle Title="@title"/>

@if (editBatch)
{
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => OnBack())" Title="Back">Back</FluentButton>
        <FluentTextField @bind-Value="@BrmBarCode" Placeholder="<Scan Barcode>" />
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => AddFileToBatch())" Title="Add File">Add File</FluentButton>
    </FluentStack>

    <FluentDataGrid Items="@files" TGridItem="DcFile" Pagination="@filePaginator">
        <PropertyColumn Width="130px" Property="@(p => p.UnqFileNo)" />
        <PropertyColumn Width="100px" Property="@(p => p.BrmBarcode)" Sortable="true" />
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Delete())" OnClick="@(() => btnRemoveItem(context.BrmBarcode))" Title="Remove" Disabled="@(selectedBatch.BatchStatus != "Open")" />
        </TemplateColumn>
        <PropertyColumn Width="130px" Property="@(p => p.ApplicantNo)" Sortable="true" />
        <PropertyColumn Width="130px" Property="@(p => p.FullName)" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.GrantType)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.RegType)" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p =>((DateTime)(p.TransDate??DateTime.MinValue)).ToShortDateString())" Sortable="true" />
        <PropertyColumn Width="100px" Property="@(p => p.MergeStatus)" Sortable="true" />

    </FluentDataGrid>
    <FluentPaginator State="@filePaginator" />
}
else
{
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentSelect TOption="String"
                      Label="Status filter"
                      Items="@sservice.GetBatchStatus("LO").Values"
                      Id="lo-batchstatus-listbox"
                      Width="200px"
                      Height="250px"
                      Placeholder="Make a selection..."
                      OptionValue="@(p => p)"
                      OptionText="@(p => p)"
                      @bind-Value="@filterStatus"
                      @onchange="FilterStatus"/>

        <FluentTextField @bind-Value="@searchBatch" Placeholder="Batch number" />
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Search())" OnClick="@(() => FindBatch())" Title="Find batch" />

        <FluentCheckbox @bind-Value="@showMybatches" Label="Show my batches" CheckStateChanged="(e) => FilterUser(e)" />
        <FluentTextField @bind-Value="@BrmBarCode" Placeholder="<Scan Barcode>" />
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => AddFileToBatch())" Title="Add File">Add File</FluentButton>

        @if (filterStatus == "Open")
        {
        <FluentCheckbox Label="Select all batches" CheckStateChanged = "(e) => chkSelectAll(e)" />
        <FluentButton Appearance="Appearance.Accent" OnClick="@(() => AddFileToBatch())" Title="Close Selected" Disabled="@(DTBatch.ToList().Where(b => b.IsSelected).Count() == 0)">Close Selected</FluentButton>
        }
   </FluentStack>

    <FluentDataGrid Items="@DTBatch" TGridItem="DcBatch" Pagination="@batchPaginator">
        <PropertyColumn Width="130px" Property="@(p => p.BatchNo)" />
        <TemplateColumn Title="Selected" >
            <FluentCheckbox @bind-Value="@context.IsSelected"  />
        </TemplateColumn>
        <TemplateColumn Title="Actions">
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Checkmark())" OnClick="@(() => btnCloseBatch(context))" Title="Verify/Close" Disabled="@(context.BatchStatus != "Open")" />
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Edit())" OnClick="@(() => btnEditBatch(context))" Title="Edit" Disabled="@(context.BatchStatus != "Open")" />
            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Clipboard())" OnClick="@(() => btnPrintBatch(context))" Title="View/Print" Disabled="@(context.BatchStatus == "Open")" />
        </TemplateColumn>
        <PropertyColumn  Property="@(p => p.RegType)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.UpdatedByAd)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.UpdatedDate)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.BatchStatus)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.BatchComment)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.BrmWaybill)" Sortable="true" />
        <PropertyColumn  Property="@(p => p.NoOfFiles)" Sortable="true" />
    </FluentDataGrid>
    <FluentPaginator State="@batchPaginator" />
}

@code {
    protected IQueryable<DcBatch> DTBatch { get; set; } = new List<DcBatch>().AsQueryable();
    protected IQueryable<DcFile> files { get; set; } = new List<DcFile>().AsQueryable();

    protected PaginationState filePaginator { get; set; } = new PaginationState();
    protected PaginationState batchPaginator { get; set; } = new PaginationState();

    protected DcBatch selectedBatch { get; set; } = new DcBatch();

    protected string title = "";
    protected string filterStatus = "";
    protected bool showMybatches;
    protected bool editBatch;
    protected string BrmBarCode ="";
    protected string searchBatch = "";

    protected override async Task OnInitializedAsync()
    {
        title = $"Batches for {sessionservice.session.Office.OfficeName}";
        filterStatus = "";
        try
        {
            DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task FindBatch()
    {
        try
        {
            decimal.TryParse(searchBatch, out decimal result);
            if (result > 0)
            {
                DTBatch = (await qdb.FindBatch(result)).AsQueryable();
            }
            if (!DTBatch.Any() || result == 0)
            {
                DTBatch = (await qdb.GetBatches("")).AsQueryable();
                toast.ShowError("Batch not found");
            }
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    protected async Task AddFileToBatch()
    {
        try
        {
            if (BrmBarCode.Trim().Length != 8)
            { throw new Exception("Invalid BarCode."); }
            BrmBarCode = BrmBarCode.Trim().ToUpper();
            DcFile application = await db.GetBRMRecord(BrmBarCode);
            if(application.BatchNo > 0)
            {
                throw new Exception($"File {BrmBarCode} already in batch {application.BatchNo}");
            };
            string batchType = application.ApplicantNo.StartsWith("S") ? "SrdNoId" : application.RegType;
            selectedBatch.BatchNo = await db.CreateBatchForUser(batchType);
            await btnAddFileToBatch();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    protected async Task FilterStatus(ChangeEventArgs args)
    {
        filterStatus = args.Value!.ToString()!;
        try
        {
            DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task FilterUser(bool? args)
    {
        showMybatches = args ?? false;
        try
        {
            DTBatch =  (await qdb.GetMyBatches(showMybatches)).AsQueryable();
            title = showMybatches ? $"Batches for {sessionservice.session.Name}" : $"Batches for {sessionservice.session.Office.OfficeName}";
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task btnCloseBatch(DcBatch batch)
    {
        selectedBatch = batch;
        var confirmMessage = $"Are you Sure you want to close {batch.BatchNo} ?";

        DialogParameters parameters = new()
            {
                PrimaryAction = "Ok",
                Height = "230px",
                Width = "450px",
                Title = $"Confirm Region change.",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            };
        IDialogReference dialog = await dialogService.ShowDialogAsync<ConfirmContent>(confirmMessage, parameters);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            try
            {
                if (selectedBatch.BatchNo != 0) await db.SetBatchStatus(selectedBatch.BatchNo, "Closed");
                DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
                toast.ShowSuccess($"Batch #{selectedBatch.BatchNo} Closed.");
            }
            catch (Exception ex)
            {
                toast.ShowError(ex.Message);
            }
        }
    }

    protected async Task btnEditBatch(DcBatch batch)
    {
        try
        {
            selectedBatch = batch;
            files = (await qdb.GetAllFilesByBatchNoQuery(batch.BatchNo)).AsQueryable();
            editBatch = true;
            title = $"Editing batch {batch.BatchNo}";
            DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task btnRemoveItem(string brmBarCode)
    {
        try
        {
            await db.RemoveFileFromBatch(brmBarCode);
            files = (await qdb.GetAllFilesByBatchNoQuery(selectedBatch.BatchNo)).AsQueryable();
            editBatch = files.Any();
            title = files.Any() ? $"Editing batch {selectedBatch.BatchNo}" : "Batches";
            DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    //Always use newbatch to do validation
    protected async Task btnAddFileToBatch()
    {
        try
        {
            await db.AddFileToBatch(BrmBarCode, selectedBatch.BatchNo);
            files = (await qdb.GetAllFilesByBatchNoQuery(selectedBatch.BatchNo)).AsQueryable();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }
    protected async Task OnBack()
    {
        editBatch = false;
        filterStatus = "";
        DTBatch = (await qdb.GetBatches(filterStatus)).AsQueryable();
        title = $"Batches";
    }
    protected void chkSelectAll(bool? e)
    {
        var selected =e??false;
        if (!DTBatch.ToList().Any()) return;
        foreach (DcBatch batch in DTBatch.ToList().Where(r => r.BatchStatus == "Open"))
        {
            batch.IsSelected = selected;
        }
    }

    protected void chkSelect(ChangeEventArgs e, DcBatch batch)
    {
        var selected = (bool)(e.Value??false);
        batch.IsSelected = selected;
    }

    protected async Task btnClose_Click()
    {
        foreach (DcBatch batch in DTBatch.Where(b => b.IsSelected))
        {
            if(batch.BatchNo != 0)await db.SetBatchStatus(batch.BatchNo, "Closed");
        }
        DTBatch = (await qdb.GetBatches("Open")).AsQueryable();
        toast.ShowSuccess($"Selected batches Closed.");
    }

    protected async Task btnPrintBatch(DcBatch batch)
    {
        try
        {
            List<DcFile> files = await db.GetAllFilesByBatchNo(batch.BatchNo);
            StringBuilder sb = new StringBuilder();

            sb.Append(BulkPrint.Header());
            sb.Append(BulkPrint.CreateBatchCover(files, sessionservice.session.Office.OfficeName, batch.BatchNo));
            sb.Append(BulkPrint.Footer());

            string FileName = sessionservice.session.Office.RegionCode + "-" + sessionservice.session.SamName.ToUpper() + "-" + "Batch_" + batch.BatchNo + "-" + DateTime.Now.ToShortDateString().Replace("/", "-") + "-" + DateTime.Now.ToString("HH-mm");//.Replace(":", "-");

            await rd.SaveHtmlReport(sb.ToString(), FileName);

            toast.ShowSuccess($"Batch cover :{batch.BatchNo} queued.");
        }
        catch //(Exception ex)
        {
            toast.ShowError($"Batch cover :{batch.BatchNo} error.");

        }
        await Js.InvokeVoidAsync("open", $"{NavigationM.BaseUri}batchcover/{batch.BatchNo.ToString()}", "_blank");
        //await Js.InvokeAsync<object>("open", $"{NavigationM.BaseUri}batchcover/{batch.BatchNo}", "_blank");
    }


}





