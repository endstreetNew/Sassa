@inject Navigation Navigate
@inject NavigationManager NavigationM
@inject Helper helper
@inject SessionService sessionservice
@inject BRMDbService db
@inject QueryableDataService qdb
@inject StaticService staticservice
@inject IToastService toast
@inject IJSRuntime Js
@inject IWebHostEnvironment env

@inject ReportDataService rd
@inject IDialogService DialogService

@using System.Text
@using System.IO;

<FluentStack Orientation="Orientation.Horizontal">
    <FluentSpacer />
    <h4>Re-boxing [@rebox.BoxNo]</h4>
</FluentStack>
<FluentStack Orientation="Orientation.Horizontal">
    <FluentStack Orientation="Orientation.Vertical">
        <BoxStatus rebox="@rebox" ShowLoad="true" OnloadBox="btnLoadBox_Click"></BoxStatus>
        <FluentSelect TOption="String"
                      Label="Registry Type"
                      Items="@staticservice.GetBoxTypes("N").Keys"
                      Id="rmc-registry-listbox"
                      Width="200px"
                      Placeholder="Make a selection..."
                      OptionValue="@(p => p)"
                      OptionText="@(p => staticservice.GetBoxTypes("N")[p])"
                      @bind-Value="@rebox.SelectedType"
                      @onchange="@(e => RegTypeChange(e))" />

        <FluentSelect TOption="String"
                      Label="Transfer To"
                      Items="@staticservice.GetBoxTypes("Y").Keys"
                      Id="rmc-boxtype-listbox"
                      Width="200px"
                      Height="250px"
                      Placeholder="Make a selection..."
                      OptionValue="@(p => p)"
                      OptionText="@(p => staticservice.GetBoxTypes("Y")[p])"
                      Disabled="@(!loaded)"
                      @bind-Value="@rebox.ToRegionId"
                      @onchange="@(e => RegTypeChange(e))" />
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField Id="brmInput" @onkeyup="@AddEnter" @bind-Value="@rebox.BrmBarcode" Placeholder="<Scan Barcode>" Disabled="@(!loaded)" />
            <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Add())" @onclick="btnAddFile_Click" Disabled="@(!loaded)">Add file</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField @bind-Value="@RemoveBarcode" Placeholder="<Scan Barcode>" Disabled="@(!loaded)" />
            <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Add())" @onclick="btnRemoveFile_Click" Disabled="@(!loaded)">Remove file</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentTextField @bind-Value="@rebox.NewBarcode" Placeholder="<Scan new Barcode>" Disabled="@(!loaded)" />
            <FluentTextField @bind-Value="@rebox.MisFileNo" Placeholder="<Scan MIS File>" Disabled="@(!loaded)" />
            <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Add())" @onclick="btnAddMISFile_Click" Disabled="@(!loaded)">Add MIS file</FluentButton>
        </FluentStack>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentNumberField @bind-Value="@rebox.BatchNo" Placeholder="<Enter Batch no>" Disabled="@(!loaded)" />
            <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Add())" @onclick="btnAddBatch_Click" Disabled="@(!loaded)">Add Batch</FluentButton>
        </FluentStack>

    </FluentStack>
    <FluentDivider Orientation="Orientation.Horizontal" />
    <FluentStack Orientation="Orientation.Vertical">
        @*Right Side*@
        @if (boxfiles.Any())
        {
            <WidgetTitle Title="Box Items" />
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton Appearance="Appearance.Accent" @onclick="() => btnPrint_Click()" Disabled="@(!boxfiles.Any())">Print BoxCover (@(boxfiles.Count()))</FluentButton>
                <FluentButton Appearance="Appearance.Accent" @onclick="() => btnPrintCovers_Click(false)" Disabled="@(!boxfiles.Any())">Print All Covers</FluentButton>
                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => btnPrintCovers_Click(true))" Disabled="@(!boxfiles.Any())">Print Unscanned</FluentButton>
                <FluentButton Appearance="Appearance.Accent" @onclick="@(() => btnOpenClose_Click())" Disabled="@(!rebox.IsLCSelected && !boxfiles.Any() || BoxLocked)">@(BoxOpen ? "Close" : "Open") Box</FluentButton>
            </FluentStack>
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentTextField @bind-Value="@searchText" Placeholder="<Id/BRMBarcode>" Disabled="@(!loaded)" />
                <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Search())" @onclick="@(() => btnSearch_Click())" Disabled="@(!loaded)">Search</FluentButton>
                <FluentButton IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Search())" @onclick="@(() => btnClearSearch_Click())" Disabled="@(!loaded)">Clear</FluentButton>
            </FluentStack>
            <FluentDataGrid Items="@boxfiles.AsQueryable()" TGridItem="ReboxListItem" Pagination="@paginationState">
                <PropertyColumn Property="@(p => p.BrmNo)" Sortable="true" />
                <PropertyColumn Property="@(p => p.RegType)" Sortable="true" />
                <PropertyColumn Property="@(p => p.MiniBox)" Sortable="true" />
                <PropertyColumn Width="130px" Property="@(p => p.IdNo)" Sortable="true" />
                <PropertyColumn Property="@(p => p.FullName)" Sortable="true" />
                <PropertyColumn Width="130px" Property="@(p => p.ClmNo)" Sortable="true" />
                <TemplateColumn Title="Actions">
                    <FluentButton Style="Width:30px;" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Eye())" Target="_blank" @onclick="@(() => ShowCover(context.BrmNo))"></FluentButton>
                </TemplateColumn>
                <TemplateColumn Title="Scanned">
                    <FluentCheckbox Style="Width:30px;"  @bind-Value="context.Scanned" />
                </TemplateColumn>
                <TemplateColumn Title="Locked">
                    <FluentCheckbox Style="Width:30px;" @bind-Value="context.BoxLocked"></FluentCheckbox>
                </TemplateColumn>
            </FluentDataGrid>
            <FluentPaginator State="@paginationState" />
        }

    </FluentStack>
</FluentStack>



@code {
    [Parameter]
    public string boxNo { get; set; } = "";

    PaginationState paginationState = new PaginationState() { ItemsPerPage = 10 };

    protected bool BoxLocked;
    protected bool BoxOpen;
    protected string RemoveBarcode = "";

    protected string searchText = "";

    protected Reboxing rebox = new Reboxing();
    bool loaded = false;

    List<ReboxListItem> boxfiles = new();

    bool transferHidden = true;
    bool archiveHidden = true;
    // private FluentTextField? brmInput;

    protected override async Task OnInitializedAsync()
    {
        this.
        sessionservice.session.BookMark.BoxingTab = 3;
        if (!string.IsNullOrEmpty(boxNo))
        {
            rebox.BoxNo = boxNo.ToUpper().Trim();
            await btnLoadBox_Click();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await FocusBrmInput();
    }
    private async Task FocusBrmInput()
    {
        await Js.InvokeVoidAsync("SetIdFocus", "brmInput");
    }
    protected async Task btnLoadBox_Click()
    {
        try
        {

            if (string.IsNullOrEmpty(rebox.BoxNo) || rebox.BoxNo.Length > 7 || !rebox.BoxNo.All(char.IsLetterOrDigit))
            {
                throw new Exception($"Invalid Box No: {rebox.BoxNo}.");
            }
            if (!loaded)
            {
                rebox.BoxNo = rebox.BoxNo.ToUpper().Trim();
                await OnPaged();//Load items in this box
                                //Todo: fix field in db
                rebox.MiniBox = boxfiles.Max(r => r.MiniBox) == null ? 1 : (int)boxfiles.Max(r => r.MiniBox)!;
                BoxLocked = boxfiles.Where(r => r.BoxLocked).Any();
                BoxOpen = boxfiles.Where(r => r.TdwBatch == 0).Any();
                //rebox.RegType = "";
                //rebox.BoxNo = boxNo;

                if (BoxLocked)
                {
                    toast.ShowWarning("This box has been dispatched and is locked.");
                }
                if (boxfiles.Any())
                {
                    rebox.AltBoxNo = boxfiles.First().AltBoxNo;
                    rebox.RegType = boxfiles.First().RegType;
                    if (string.IsNullOrEmpty(rebox.SelectedType))
                    {
                        // 1 main 14 archive
                        //13 main lc 18 archive lc
                        switch (rebox.RegType)
                        {
                            case "LC-MAIN":
                                rebox.SelectedType = "13";
                                break;
                            case "LC-ARCHIVE":
                                rebox.SelectedType = "18";
                                break;
                            case "MAIN":
                                rebox.SelectedType = "1";
                                break;
                            case "ARCHIVE":
                                rebox.SelectedType = "14";
                                break;
                            default:
                                rebox.SelectedType = "1";
                                break;
                        }

                    }
                }
                else
                {
                    toast.ShowWarning("Box not found (Creating new box).");
                }
                loaded = !BoxLocked;
                await Task.Delay(100);
                //wait brmInput!.Element.FocusAsync();
                return;
            }
            loaded = false;
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    protected async Task btnSearch_Click()
    {
        try
        {
            if (string.IsNullOrEmpty(searchText)) throw new Exception("Nothing to search.");
            boxfiles = await qdb.SearchBox(rebox.BoxNo, searchText);
            //await Task.Delay(100);
            //StateHasChanged();

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }
    protected async Task btnClearSearch_Click()
    {

        searchText = "";
        loaded = false;
        await btnLoadBox_Click();

    }

    public async Task AddEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter" || rebox.BrmBarcode.Trim().Length >= 8)
        {
            await btnAddFile_Click();
        }
    }

    protected async Task btnAddFile_Click()
    {
        try
        {
            rebox.BrmBarcode = rebox.BrmBarcode.ToUpper().Trim();
            if (string.IsNullOrEmpty(rebox.BrmBarcode) || rebox.BrmBarcode.Trim().Length != 8) throw new Exception("Invalid Barcode");
            if (string.IsNullOrEmpty(rebox.SelectedType)) throw new Exception("Please select a boxtype.");
            if (rebox.MiniBox > 5) throw new Exception("Only 5 Miniboxes allowed.");
            rebox.MisFileNo = string.Empty;
            rebox.NewBarcode = string.Empty;
            await AddFile();
            //brmInput?.FocusAsync();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task btnRemoveFile_Click()
    {
        try
        {
            RemoveBarcode = RemoveBarcode.ToUpper().Trim();
            if (string.IsNullOrEmpty(RemoveBarcode) || RemoveBarcode.Trim().Length != 8) throw new Exception("Invalid Barcode");
            await db.RemoveFileFromBox(RemoveBarcode);
            await OnPaged();
            toast.ShowSuccess($"BRM# {rebox.BrmBarcode} removed from {rebox.BoxNo}.");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task btnAddMISFile_Click()
    {
        try
        {
            rebox.NewBarcode = rebox.NewBarcode.ToUpper().Trim();
            if (string.IsNullOrEmpty(rebox.MisFileNo.Trim()) || rebox.MisFileNo.Trim().Length > 11 || rebox.MisFileNo.Trim().Length < 4) throw new Exception("Invalid MIS File Number");
            if (string.IsNullOrEmpty(rebox.NewBarcode.Trim()) || rebox.NewBarcode.Trim().Length != 8) throw new Exception("Invalid Barcode");
            if (string.IsNullOrEmpty(rebox.SelectedType)) throw new Exception("Please select a boxtype.");
            if (rebox.MiniBox > 5) throw new Exception("Only 5 Miniboxes allowed.");
            rebox.BrmBarcode = string.Empty;
            DcFile file = await AddFile();

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
            //db.CreateActivity("Rebox" + db.GetFileArea(null, 0), $"Error from MIS {rebox.MisFileNo.Trim()} :" + ex.Message.Substring(0,200), "");
        }
    }

    protected async Task btnAddBatch_Click()
    {
        try
        {
            if (rebox.BatchNo == 0) throw new Exception("Invalid BatchNo");
            if (string.IsNullOrEmpty(rebox.SelectedType)) throw new Exception("Please select a boxtype.");
            if (rebox.MiniBox > 5) throw new Exception("Only 5 Miniboxes allowed.");

            await AddBatch();

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected async Task<DcFile> AddFile()
    {

        try
        {
            // if (boxfiles.count > 149) throw new Exception($"Too many files, Maximun allowed: 150.");
            rebox.ToRegionId = rebox.SelectedType == "3" ? rebox.ToRegionId : rebox.SelectedType;
            return await Rebox(rebox);

        }
        catch (Exception ex)
        {
            throw;
        }
    }

    protected async Task AddBatch()
    {
        try
        {
            List<string> barcodes = await db.GetBatchBarcodes((decimal)rebox.BatchNo);
            //if (boxfiles.count + barcodes.Count() > 150) throw new Exception($"Too many files for this box result: {boxfiles.count + barcodes.Count()} Maximun allowed: 150.");
            rebox.ToRegionId = rebox.SelectedType == "3" ? rebox.ToRegionId : rebox.SelectedType;
            rebox.MisFileNo = string.Empty;
            rebox.NewBarcode = string.Empty;
            foreach (string brmBarCode in barcodes)
            {
                rebox.BrmBarcode = brmBarCode;
                await Rebox(rebox);
            }
            toast.ShowSuccess("Batch No " + rebox.BatchNo + " added to TDW box " + rebox.BoxNo + ".");
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    protected void RegTypeChange(ChangeEventArgs e)
    {


        rebox.SelectedType = e.Value == null ? "" : e.Value.ToString();
        if (string.IsNullOrEmpty(rebox.SelectedType)) return;
        transferHidden = !(staticservice.GetBoxTypes()[rebox.SelectedType]).Contains("Transfer");
        archiveHidden = !(staticservice.GetBoxTypes()[rebox.SelectedType]).Contains("Archive");
        if (!string.IsNullOrEmpty(rebox.RegType))
        {
            toast.ShowInfo($"Box only accepts {(rebox.IsLCSelected ? "LC" : rebox.RegType)}");
        }
    }

    protected async Task btnPrint_Click()
    {
        await Js.InvokeVoidAsync("open", System.Threading.CancellationToken.None, $"reboxcover/{rebox.BoxNo}/{rebox.AltBoxNo}", "_blank");
    }

    protected async Task ShowCover(string barCode)
    {
        await Js.InvokeVoidAsync("open", System.Threading.CancellationToken.None, $"coversheet/{barCode}", "_blank");
    }

    protected async Task btnPrintCovers_Click(bool NotScanned)
    {
        try
        {
            List<RequiredDocsView> docs;

            StringBuilder sb = new StringBuilder();

            sb.Append(BulkPrint.Header());

            List<ReboxListItem> sheets = await db.GetAllFilesByBoxNo(rebox.BoxNo, NotScanned);

            foreach (var rebox in sheets)
            {
                DcFile file = await db.GetBRMRecord(rebox.BrmNo);

                docs = staticservice.GetGrantDocuments(file.GrantType);
                if (file.Lctype != null && file.Lctype > 0)
                {
                    string lcType = staticservice.GetLcType((decimal)file.Lctype);
                    sb.Append(BulkPrint.CreateFileCover(file, staticservice.GetGrantType(file.GrantType), staticservice.GetRegion(file.RegionId), NavigationM.BaseUri, lcType, docs));
                }
            }

            sb.Append(BulkPrint.Footer());
            toast.ShowSuccess($"Box :{rebox.BoxNo} Coversheets queued.");

            await rd.SaveHtmlReport(sb.ToString(), helper.GetFileName($"Box_{rebox.BoxNo}", sessionservice.session));
            sheets = new();

        }
        catch (Exception ex)
        {
            toast.ShowError($"Box :{rebox.BoxNo} Coversheets error. {ex.Message}");
        }
    }

    protected async Task<DcFile> Rebox(Reboxing rebox)
    {

        try
        {
            DcFile file = await db.GetReboxCandidate(rebox);
            if (boxfiles.Any())
            {
                if (file.IsPreservedType())
                {
                    if ((rebox.IsLCSelected && !file.IsLc()) || (!rebox.IsLCSelected && file.IsLc()))
                    {
                        throw new Exception($"Filetype / Boxtype mismatch expecting {rebox.RegType} file.");
                    }
                }
            }

            if (boxfiles.Any())
            {
                rebox.AltBoxNo = await db.GetNexRegionAltBoxSequence();
            }
            file.PrintOrder = boxfiles.Count();

            await db.Rebox(rebox, file);

            if (rebox.BatchNo == 0)
            {
                string scanState = file.ScanDatetime == null ? "Not Scanned" : "Scanned";
                toast.ShowSuccess($"BRM# {rebox.BrmBarcode} added to TDW box {rebox.BoxNo}. ({scanState})");
                //rebox.RegType = file.ApplicationStatus.Trim("LC-".ToCharArray());
            }
            rebox.BrmBarcode = string.Empty;
            rebox.MisFileNo = string.Empty;
            rebox.NewBarcode = string.Empty;
            await OnPaged();
            return file;

        }
        catch (Exception ex)
        {
            throw;
        }
    }

    protected async Task OnPaged()
    {

        boxfiles = await qdb.GetAllFilesByBoxNo(rebox.BoxNo);
        rebox = await db.GetBoxCounts(rebox);
    }

    private async Task btnOpenClose_Click()
    {
        //BoxOpen: box is open and files can be added TdwBatch 0 for Open 1 for Closed > 1 for locked
        BoxOpen = await db.OpenCloseBox(rebox.BoxNo, BoxOpen);
        boxfiles = await qdb.GetAllFilesByBoxNo(rebox.BoxNo);
    }
}
