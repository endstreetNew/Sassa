@inject NavigationManager nav
@inject SessionService sessionservice
@inject TdwBatchService db
@inject IToastService toast
@inject IJSRuntime Js
@inject IWebHostEnvironment env

@inject ReportDataService rs


@using System.Text
@using System.IO;
@using Sassa.BRM.Data.ViewModels;
<BrmPageTitle Title="Tdw Batching" Loading="@loading"/>
<FluentTabs>
    <FluentTab Label="Batching" Id="tdwtab-1" Disabled="@(!(sessionservice.session!.Office!.OfficeType != "LO" && sessionservice.session.IsInRole("GRP_BRM_Monitoring")))">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentDatePicker Label="From Date" @bind-Value="@period.FromNullDate" />
            <FluentDatePicker Label="To Date" @bind-Value="@period.ToNullDate" />
            <FluentTextField Placeholder="<BoxNo>" @bind-Value="boxSearch" />
            <FluentButton Appearance="Appearance.Accent" @onclick="btnLoadBoxes_Click">Load</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick="() => btnPrint_Click()" Disabled="@(!boxfiles.Where(b => b.IsSelected).Any())">Dispatch Selected</FluentButton>
        </FluentStack>
        <FluentDataGrid Items="@boxfiles.AsQueryable()" TGridItem="TdwBatchViewModel" Pagination="@boxPagination">
            <PropertyColumn Property="@(p => p.BoxNo)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Center">
                <FluentCheckbox @bind-Value="context.IsSelected"></FluentCheckbox>
                <FluentButton IconEnd="@(new Icons.Regular.Size12.LockOpen())" OnClick="@(() => btnUnlock_Click(context.BoxNo))" Title="Unlock box" Disabled="@(!(sessionservice.session!.Office!.OfficeType != "LO" && sessionservice.session.IsInRole("GRP_BRM_Monitoring")))"/>
         </FluentStack>
            </TemplateColumn>
           
            <PropertyColumn Property="@(p => p.MiniBoxes)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Files)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Region)" Sortable="true" />
        </FluentDataGrid>
        <FluentPaginator State="@boxPagination" />
    </FluentTab>
    <FluentTab Label="Batch History" Id="tdwtab-2" Disabled="@(!(sessionservice.session!.Office!.OfficeType != "LO" && sessionservice.session.IsInRole("GRP_BRM_Monitoring")))">
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentDatePicker Label="From Date" @bind-Value="@period.FromNullDate" />
            <FluentDatePicker Label="To Date" @bind-Value="@period.ToNullDate" />
            <FluentButton Appearance="Appearance.Accent" @onclick="btnLoadBatches_Click">Load batched files</FluentButton>
           
        </FluentStack>

        <FluentDataGrid Items="@batchedfiles.AsQueryable()" TGridItem="TdwBatchViewModel" Pagination="@batchPagination">
            <PropertyColumn Property="@(p => p.TdwBatchNo)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentButton IconEnd="@(new Icons.Regular.Size12.Eye())" @onclick="() => btnPrintBatch_Click(context.TdwBatchNo)"/>
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.User)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Boxes)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Files)" Sortable="true" />
            <PropertyColumn Property="@(p => p.Region)" Sortable="true" />
            <PropertyColumn Property="@(p => p.TdwSendDate)" Sortable="true" />
        </FluentDataGrid>
        <FluentPaginator State="@batchPagination" />
    </FluentTab>

    <FluentTab Label="Dispatch History" Id="tdwtab-3">

        <FluentDataGrid Items="@files.AsQueryable()" TGridItem="CsvListItem" Pagination="@filePagination">
            <TemplateColumn Title="Actions">
                <FluentButton IconEnd="@(new Icons.Regular.Size12.Mail())" OnClick="@(() => btnResend_Click(context.FileName))" Title="Resend batch" />
            </TemplateColumn>
            <PropertyColumn Property="@(p => p.ReportName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.UserName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.FileName)" Sortable="true" />
            <PropertyColumn Property="@(p => p.RegionCode)" Sortable="true" />
            <PropertyColumn Property="@(p => p.ReportDate)" Sortable="true" />
        </FluentDataGrid>
        <FluentPaginator State="@filePagination" />
    </FluentTab>
</FluentTabs>


@code {
    protected string boxSearch = "";

    List<TdwBatchViewModel> batchedfiles = new();
    List<TdwBatchViewModel> boxfiles = new();
    List<CsvListItem> files = new();

    PaginationState boxPagination = new PaginationState() { ItemsPerPage = 10 };
    PaginationState batchPagination = new PaginationState() { ItemsPerPage = 10 };
    PaginationState filePagination = new PaginationState() { ItemsPerPage = 10 };

    ReportPeriod period = new ReportPeriod() { FromDate = DateTime.Now.AddDays(-180), ToDate = DateTime.Now };

    bool loading;

    protected override async Task OnInitializedAsync()
    {
        files = rs.GetTdwFileList(sessionservice.session.Office.RegionCode, sessionservice.session.SamName);
        await Task.CompletedTask;
    }
    //Loader boxes for batching tab
    protected async Task btnLoadBoxes_Click()
    {
        loading = true;
        if (!string.IsNullOrEmpty(boxSearch))
        {
            boxfiles = await db.GetBox(boxSearch);
        }
        else
        {
            boxfiles = await db.GetAllBoxes(period);
        }
        loading = false;
    }

    protected async Task btnLoadBatches_Click()
    {
        try
        {
            loading = true;
            batchedfiles = await db.GetTdwBatches(period);
        }
        catch
        {
            toast.ShowError("Error loading Batch History");
        }
        finally
        {
            loading = false;
        }
    }

    protected async Task btnPrint_Click()
    {
        toast.ShowWarning("Dispatching boxes to TDW will permanently lock the selected box!");
        loading = true;
        int tdwBatch = await db.CreateTdwBatch(boxfiles.Where(b => b.IsSelected).ToList());
        loading = false;
        btnPrintBatch_Click(tdwBatch);
        await btnLoadBoxes_Click();
    }
    protected void btnPrintBatch_Click(int tdwBatch)
    {
        _ = Js.InvokeVoidAsync("open", $"{nav.BaseUri}tdwbatchcover/{tdwBatch}", "_blank");
    }
    protected async Task btnUnlock_Click(string boxNo)
    {

        await db.UnlockBox(boxNo);
        boxSearch = "";
        await btnLoadBoxes_Click();
    }

    protected void btnResend_Click(string fileName)
    {
        db.SendFile(fileName);
    }
}
