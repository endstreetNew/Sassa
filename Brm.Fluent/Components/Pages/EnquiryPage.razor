@page "/enquirypage"

@inject Navigation nav
@inject IToastService toast
@inject BRMDbService db
@inject StaticService sservice
@inject IDialogService dialogService

<BrmPageTitle Title="Enquiry" Loading="loading"/>
<FluentStack>
    <FluentTextField @bind-Value="@txtSearchBrm" Placeholder="Brm barcode or Id..." />
    <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Search())" Title="Search" OnClick="@(async () => await Search())"></FluentButton>
</FluentStack>

<strong>Results</strong>
<FluentDataGrid Items="@idResults.AsQueryable()" TGridItem="Enquiry" Pagination="@EnquiryPagination">
    <PropertyColumn Width="130px" Property="@(p => p.BrmBarCode)" />
    <PropertyColumn Width="100px" Property="@(p => p.CaptureDate)" />
    <PropertyColumn Width="200px" Property="@(p => p.GrantType)" />
    <TemplateColumn>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.PreviewLink())" Title="View cover" OnClick="@(() => btnViewCover(context.BrmBarCode))"></FluentButton>
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Document())" Title="Detail" OnClick="@(async () => await btnShowDetail(context))"></FluentButton>
    </TemplateColumn>
</FluentDataGrid>
<FluentPaginator State="@EnquiryPagination" />



@code {
    protected Enquiry e { get; set; } = new();
    protected List<Enquiry> idResults { get; set; } = new();
    protected PaginationState EnquiryPagination = new PaginationState() { ItemsPerPage = 15 };

    string txtSearchBrm = "";
    bool loading = false;

    async Task Search()
    {
        try
        {
            if (loading) return;
            idResults.Clear();
            loading = true;
            if (txtSearchBrm.Length == 8)
            {
                e = await db.GetEnquiry(txtSearchBrm.ToUpper());
                idResults.Add(e);
            }
            else if (txtSearchBrm.Length == 13)
            {
                idResults = await db.GetEnquiryById(txtSearchBrm);
            }
            else if (txtSearchBrm.Length == 12)
            {
                idResults = await db.GetEnquiryBySrd(txtSearchBrm);
            }
            else 
            {
                loading = false;
                toast.ShowError("Invalid search criteria.");
                await Task.CompletedTask;
            }
            if(idResults.Count() == 1)
            {
                e = idResults.First();
                loading = false;
                await btnShowDetail(e);
            }
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    protected void btnViewCover(string brmBarCode)
    {
        nav.NavigateTo($"coversheet/{brmBarCode}");
    }
    protected async Task btnShowDetail(Enquiry en)
    {
        DialogParameters parameters = new()
            {
                Title = $"Detail for Brm Record {en.BrmBarCode}",
                PrimaryAction = "Ok",
                // PrimaryActionEnabled = false,
                // SecondaryAction = "No",
                Height = "90%",
                Width = "100%",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        IDialogReference dialog = await dialogService.ShowDialogAsync<GrantContent>(en, parameters);
        var result = await dialog.Result;
    }
}
