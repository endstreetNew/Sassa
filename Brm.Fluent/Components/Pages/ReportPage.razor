@page "/reportpage"
@page "/reportpage/{param}"
@inject Navigation Navigate
@inject Helper helper
@inject SessionService sessionservice
@inject BRMDbService db
@inject StaticService sservice
@inject ProgressService og
@inject ReportDataService rs
@inject IToastService toast

<BrmPageTitle Title="Reports"></BrmPageTitle>
<FluentTabs>
    <FluentTab Label="Reports" Id="reportTab-1">
        <br />
        <div class="row">
            <div class="col">
                <table>
                    <tr>
                        <td>

                            <div class="input-group mb-1">
                                <span class="input-group-text">Select report</span>
                                <select class="form-select" @bind="rIndex">
                                    <option selected>select...</option>
                                    @foreach (var val in reportList)
                                    {
                                        <option value="@val.Key">@val.Value</option>
                                    }
                                </select>
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-primary active" @onclick="btnFTPExport_Click">Save Report</button>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <br />
        <div class="row">
            <span><strong>Filter Options</strong></span>
        </div>
        @if (rIndex == "11")
        {
            <div class="input-group mb-1">
                <span class="input-group-text">Region</span>
                <select class="form-select" @bind="office.RegionId">
                    <option value="" selected>All...</option>
                    @foreach (var region in sservice.GetRegions())
                    {
                        <option value="@region.Key">@region.Value</option>
                    }
                </select>
            </div>
        }
        else
        {
            @if (rIndex == "3" || rIndex == "8" || rIndex == "12")
            {
                <div class="row">
                    <div class="col">
                        <div class="input-group mb-1">
                            <span class="input-group-text">From Quarter</span>
                            <select class="form-select" @bind="fromQuarter">
                                <option selected>select...</option>
                                @foreach (var val in quarterList)
                                {
                                    <option value="@val.Key">@val.Key</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-1">
                            <span class="input-group-text">To Quarter</span>
                            <select class="form-select" @bind="toQuarter">
                                <option selected>select...</option>
                                @foreach (var val in quarterList)
                                {
                                    <option value="@val.Key">@val.Key</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            }
            else if (rIndex == "9")
            {
                <div class="row">
                    <div class="col">
                        <div class="input-group mb-1">
                            <span class="input-group-text">For Month</span>
                            <select class="form-select" @bind="forMonth">
                                <option selected>select...</option>
                                @foreach (var val in StaticDataService.MonthList())
                                {
                                    <option value="@val.Key">@val.Value</option>
                                }
                            </select>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col">
                        <div class="input-group mb-1">
                            <span class="input-group-text">From Date</span>
                            <input class="form-control" type="date" @bind="period.FromDate">
                        </div>
                    </div>
                    <div class="col">
                        <div class="input-group mb-1">
                            <span class="input-group-text">To Date</span>
                            <input class="form-control" type="date" @bind="period.ToDate">
                        </div>
                    </div>
                </div>
            }
            @if (rIndex != "9" && rIndex != "10")
            {
                <div class="input-group mb-1">
                    <span class="input-group-text">Region</span>
                    <select class="form-select" @bind="office.RegionId">
                        <option value="" selected>All...</option>
                        @foreach (var region in sservice.GetRegions())
                        {
                            <option value="@region.Key">@region.Value</option>
                        }
                    </select>
                </div>
            }
            @if (rIndex != "3" && rIndex != "10")
            {
                <div class="input-group mb-1">
                    <span class="input-group-text">Office</span>
                    <select class="form-select" @bind="office.OfficeId">
                        <option value="" selected>All...</option>
                        @foreach (var val in sservice.GetOffices(office.RegionId))
                        {
                            <option value="@val.OfficeId">@val.OfficeName</option>
                        }
                    </select>
                </div>
                @if (rIndex != "8" && rIndex != "9" && rIndex != "10" && rIndex != "7")
                {
                    <div class="input-group mb-1">
                        <span class="input-group-text">Grant Type</span>
                        <select class="form-select" @bind="GrantType">
                            <option value="" selected>All...</option>
                            @foreach (var val in sservice.GetGrantTypes())
                            {

                                <option value="@val.Key">@val.Value</option>
                            }
                        </select>
                    </div>
                }
            }
        }
    </FluentTab>
    <FluentTab Label="Progress" Id="reportTab-2">
        <ProgressSummary></ProgressSummary>
    </FluentTab>
    <FluentTab Label="Capture Progress" Id="reportTab-3">
        <OfficeProgress></OfficeProgress>
    </FluentTab>
    <FluentTab Label="Current Wip" Id="reportTab-4">
        <CurrentWip></CurrentWip>
    </FluentTab>
    <FluentTab Label="Download reports" Id="reportTab-5">
         <ReportDownload Title="Report List"></ReportDownload> 
    </FluentTab>
</FluentTabs>

@code
{
    [Parameter]
    public string param { get; set; } = "";

    protected UserOffice office = new();
    string rIndex = "";
    string fromQuarter ="";
    string toQuarter ="";
    string forMonth ="";

    protected bool IsDashboardLoaded;
    protected bool IsMissingDashboardLoaded;

    ReportPeriod period = new ReportPeriod { FromDate = DateTime.Now.AddMonths(-1), ToDate = DateTime.Now };

    Dictionary<string, string> reportList = new();
    Dictionary<string, ReportPeriod> quarterList = new();

    List<CsvListItem> files = new();
    List<DcSocpen> missingFiles = new();

    string GrantType = "";

    protected override async Task OnInitializedAsync()
    {
        office = sessionservice.session!.Office!;
        IsMissingDashboardLoaded = false;
        IsDashboardLoaded = false;
        quarterList = StaticDataService.QuarterList();
        reportList = rs.reportList;
        period = StaticDataService.AfterLastQuarter;
        //await OnMissingPaged();
    }

    protected void SelectRegion(ChangeEventArgs e)
    {
        if (e.Value == null) return;
        office.RegionId = (string)e.Value;
        office.OfficeId = sservice.GetOffices(office.RegionId).First().OfficeId;
    }

    private async Task btnFTPExport_Click()
    {
        try
        {
            await Task.Delay(100);
            if (rIndex == "7" && string.IsNullOrEmpty(office.OfficeId)) //Performance Report
            {
                throw new Exception("Please select an office for this report.");
            }
            if (rIndex == "3" || rIndex == "12")
            {
                period.FromDate = quarterList[fromQuarter].FromDate;
                period.ToDate = quarterList[toQuarter].ToDate;
            }

            toast.ShowInfo($"{reportList[rIndex]} queued.");
            string FileName = helper.GetFileName(reportList[rIndex].Replace(" ", "_"),sessionservice.session);
            //db.session.Office.RegionCode + "-" + db.session.SamName.ToUpper() + "-" + reportList[rIndex].Replace(" ", "_") + "-" + DateTime.Now.ToShortDateString().Replace("/", "-") + "-" + DateTime.Now.ToString("HH-mm");

            if (rIndex == "8")
            {
                await rs.SaveReport(rIndex, quarterList[fromQuarter],quarterList[toQuarter], office.RegionId, FileName);
            }
            else
            {
                if(rIndex == "9")
                {
                    var monthYear = forMonth.Split('|');
                    int month = int.Parse(monthYear[0]);
                    int year = int.Parse(monthYear[1]);
                    await rs.SaveCsvReport(new DateTime(year, month, 1).ToString("dd/MM/yyyy"),new DateTime(year, month, DateTime.DaysInMonth(year, month)).ToString("dd/MM/yyyy"),rIndex, office.OfficeId, "RMC", office.RegionId, GrantType, FileName);
                }
                else if(rIndex == "11")
                {
                    if (sessionservice.session.IsRmc() && sessionservice.session.IsInRole("GRP_BRM_Supervisors"))
                    {
                        await rs.SaveCsvReport(period.FromDate.ToString("dd/MM/yyyy"), period.ToDate.ToString("dd/MM/yyyy"), rIndex, office.OfficeId, office.OfficeType, office.RegionId, GrantType, FileName, "");
                    }
                    else
                    {
                        throw new Exception("Reserved function.");
                    }
                }
                else
                {
                    await rs.SaveCsvReport(period.FromDate.ToString("dd/MM/yyyy"), period.ToDate.ToString("dd/MM/yyyy"), rIndex, office.OfficeId, office.OfficeType, office.RegionId, GrantType, FileName);
                }
            }

        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }

    }

    protected async Task OnMissingPaged()
    {
        // IsMissingDashboardLoaded = false;
        // await Task.Delay(100);
        // missingFiles = await og.GetMissingFiles(period,office.RegionId);
        // IsMissingDashboardLoaded = true;
    }

    protected void btnResetProgress_Click()
    {
        IsDashboardLoaded = false;
    }

    protected async Task btnSaveReport(string quarterName)
    {
        try
        {
            await Task.Delay(100);

            period.FromDate = quarterList[quarterName].FromDate;
            period.ToDate = quarterList[quarterName].ToDate;
            toast.ShowInfo($"{reportList["3"]} queued.");
            string FileName = helper.GetFileName(reportList["3"].Replace(" ", "_"),sessionservice.session);
            //db.session.Office.RegionCode + "-" + db.session.SamName.ToUpper() + "-" + reportList["3"].Replace(" ", "_") + "-" + DateTime.Now.ToShortDateString().Replace("/", "-") + "-" + DateTime.Now.ToString("HH-mm");
            await rs.SaveCsvReport(period.FromDate.ToString("dd/MM/yyyy"), period.ToDate.ToString("dd/MM/yyyy"), "3", office.OfficeId, "RMC", office.RegionId, GrantType, FileName);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

}
