@page "/searchapplicant"
@page "/searchapplicant/{Id}"

@inject SessionService sessionservice
@inject BRMDbService db
@inject StaticService sservice
@inject IToastService toast

<div class="pageTitle">
<h3>File Capture</h3>
</div>
<hr />
@if (showBrmModal)
{
    <Newbrm br="@SelectedApplication" ModalClosed="OnModalClosed" BrmSave="OnBrmSaved" TargetBoxType="@rebox.RegType"></Newbrm>
}
@if(showManualCapture)
{
    <ManualCapture br="@SelectedApplication" ModalClosed="OnModalClosed" ManualBrmSave="OnManualBrmSaved" TargetBoxType="@rebox.RegType"></ManualCapture>
}
@if(showConfirmRegion)
{
    <Confirmation Title="Confirm Region Change" Message="@regionChangeMessage" Cancel="CancelRegion" Ok="ConfirmedRegion"></Confirmation>
}

    <FluentStack>
    <FluentTextField @bind-Value="@txtSearchId" Placeholder="Enter Id here..." />
    <FluentTextField @bind-Value="@txtSearchSRD" Placeholder="Enter SRD here..."/>
    <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Search())" Title="Search" OnClick="@(async () => await Search())" ></FluentButton>
    <FluentSelect TOption="KeyValue"
                  Items="@GrantTypes"
                  Id="grant-type-listbox"
                  Width="200px"
                  Height="250px"
                  Placeholder="Select Grant type..."
                  OptionValue="@(p => p.Id)"
                  OptionText="@(p => p.Name)"
                  @bind-Value="@manualGrantType"/>

    @if (!string.IsNullOrEmpty(manualGrantType) && !DTSocPen.Where(a => a.GrantType == manualGrantType).Any())//a grantype is selected AND NO MATCHING sOCPEN rECORD
    {
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Edit())" Title="Manual Capture" OnClick="@(() => btnManualCapture_Click())">Manual Capture</FluentButton>
    }
    @if (sessionservice.session.IsRmc())
    {
        <BoxStatus Alignment="HorizontalAlignment.Right" rebox="@rebox"></BoxStatus>
    }
    </FluentStack>
<br />
<FluentCheckbox @bind-Value="@chkSearchFull" Label="Search Id History" />
<br />

<FluentTabs Class="tab">
    <FluentTab Id="tab-1">
            <Header>
                Socpen Results
            </Header>
            <Content>
            <FluentDataGrid Items="@DTSocPen.AsQueryable()" TGridItem="Application">
                <PropertyColumn Property="@(p => p.Id)" />
                <TemplateColumn Title="Actions" Align="@Align.End">
                    <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Add())" Title="New" OnClick="@((p) => btnNewCover_Click(context))"></FluentButton>
                </TemplateColumn>
                <TemplateColumn Title="Merge Parent" Align="@Align.End">
                    <FluentCheckbox @bind-Value="@context.IsMergeParent" Disabled/>
                </TemplateColumn>
                <TemplateColumn Title="Can Merge" Align="@Align.End">
                    <FluentCheckbox @bind-Value="@context.IsMergeCandidate" Disabled />
                </TemplateColumn>
                <PropertyColumn Property="@(p => p.ChildId)" Sortable="true" />
                <PropertyColumn Property="@(p => p.GrantType)"  Sortable="true" />
                <PropertyColumn Property="@(p => p.ChildId)"  Sortable="true" />
                <PropertyColumn Property="@(p => p.Srd_No)"  Sortable="true" />
                <PropertyColumn Property="@(p => p.Status)"  Sortable="true" />
                <PropertyColumn Property="@(p => p.Name)"  />
                <PropertyColumn Property="@(p => p.SurName)" />
                <PropertyColumn Property="@(p => p.AppDate)"  Sortable="true" />
                <PropertyColumn Property="@(p => p.ARCHIVE_YEAR)" Sortable="true" />
                <PropertyColumn Property="@(p => p.StatusDate)"  Sortable="true" />
            </FluentDataGrid>
            </Content>
    </FluentTab>
    <FluentTab Id="tab-2">
            <Header>
                BRM Results
            </Header>
            <Content>
        <BRMGrid Changed="RefreshDTBrm" DTBrm="@DTBrmParents" DTMerges="@DTMerged"></BRMGrid>
        </Content>
    </FluentTab>
     <FluentTab Id="tab-3">
           <Header>
                Record History
            </Header>
            <Content>
               <BRMHistory IdNumber="@txtSearchId"></BRMHistory>
        </Content>
    </FluentTab>
</FluentTabs>




@code {

    [Parameter]
    public string Id { get; set; } = default!;

    string txtSearchId ="";
    string txtSearchSRD="";
    bool chkSearchFull;
    //bool chkSearchMv = false;

    string regionChangeMessage = "";
    string manualGrantType = "";

    protected List<KeyValue> GrantTypes = new();

    protected List<Application> DTSocPen = new();
    protected List<Application> DTBrm = new();
    protected List<Application> DTBrmParents = new();
    protected List<Application> DTMerged = new();
    protected Dictionary<string, int> Unmerged = new();

    protected Application SelectedApplication = new();

    bool showConfirmRegion = false;
    bool showBrmModal = false;
    bool showManualCapture = false;

    protected Reboxing rebox = new Reboxing();

    protected override async Task OnInitializedAsync()
    {
        GrantTypes = StaticDataService.GrantTypes.ToKeyValueList();
        if (!string.IsNullOrEmpty(Id))
        {
            txtSearchId = Id;
            await Search();
        }
    }

    private async Task Search()
    {
        long srdNo = 0;
        bool srdWithNoId = false;
        try
        {
            if (string.IsNullOrEmpty(txtSearchSRD) && string.IsNullOrEmpty(txtSearchId))
            {
                throw new Exception("No search criteria provided.");
            }
            //Clear previous results
            DTSocPen.Clear();
            DTBrm.Clear();
            DTBrmParents.Clear();
            DTMerged.Clear();
            //Searching on SRD
            if (!string.IsNullOrEmpty(txtSearchSRD))
            {
                srdNo = long.Parse(txtSearchSRD);
                try
                {
                    txtSearchId = await db.GetSocpenSearchId(txtSearchSRD);
                }
                catch
                {
                    toast.ShowInfo("No Socpen results");
                }
                if (string.IsNullOrEmpty(txtSearchId))
                {
                    txtSearchId = $"S{txtSearchSRD.PadLeft(12, '0')}";
                    srdWithNoId = true;
                }
            }
            //Searching on ID
            if (!string.IsNullOrEmpty(txtSearchId))
            {
                txtSearchId = txtSearchId.Trim();
                if (srdWithNoId || txtSearchId.StartsWith("S"))
                {
                    DTSocPen = await db.SearchSocpenSrd(srdNo);
                }
                else
                {
                    if (!txtSearchId.IsNumeric() || txtSearchId.Length != 13) throw new Exception("Id is Invalid.");
                    DTSocPen = await db.SearchSocpenId(txtSearchId, chkSearchFull);
                }
                if (!DTSocPen.Any()) toast.ShowInfo("No Socpen results");
                MergeSocpen();
                await RefreshDTBrm();
            }
        }
        catch (Exception ex)
        {
            DTSocPen.Clear();
            DTBrm.Clear();
            DTBrmParents.Clear();
            DTMerged.Clear();
            toast.ShowError(ex.Message);

        }
    }


    protected async Task RefreshDTBrm()
    {
        if (!string.IsNullOrEmpty(txtSearchId))
        {
            DTBrm = await db.SearchBRMID(txtSearchId);
            if (!DTBrm.Any())
            {
                toast.ShowInfo("No Brm results");
            }
            else
            {
                MergeBrm();
                if (sessionservice.session.IsRmc())
                {
                    rebox = await db.GetBoxCounts(rebox);
                }
            }
        }
    }

    protected void MergeSocpen()
    {
        if (DTSocPen.Any())
        {
            //Combination Grants
            foreach (var row in DTSocPen.Where(r => r.GrantType == "6"))
            {
                row.RowType = "C";
            }
            //MergeGrants
            foreach (var group in DTSocPen.GroupBy(d => d.AppDate).Where(g => g.Count() > 1))
            {
                foreach (var row in group.ToArray())
                {
                    row.RowType = "M";
                }
            }
        }
    }

    protected void MergeBrm()
    {
        if (DTBrm.Any())
        {
            DTBrmParents = DTBrm.Where(r => string.IsNullOrEmpty(r.Brm_Parent) || (!string.IsNullOrEmpty(r.Brm_Parent) && r.Brm_BarCode == r.Brm_Parent)).ToList();//&& r.TDW_BOXNO == null
            DTMerged = DTBrm.Where(r => !string.IsNullOrEmpty(r.Brm_Parent) && r.Brm_BarCode != r.Brm_Parent).ToList();
        }
    }

    private async Task btnNewCover_Click(Application a)
    {
        rebox.BoxNo = rebox.BoxNo.ToUpper();
        if (string.IsNullOrEmpty(rebox.BoxNo))
        {
            if (sessionservice.session.IsRmc())
            {
                toast.ShowError("a TDW BoxNo is required to capture at the RMC.");
                return;
            }
        }
        else
        {
            rebox = await db.GetBoxCounts(rebox);
        }

        a.TDW_BOXNO = rebox.BoxNo;
        a.MiniBox = rebox.MiniBox;
        if (rebox.MiniBox > 5)
        {
            toast.ShowError("Only 5 Miniboxes allowed.");
            return;
        }
        SelectedApplication = a;
        if (a.RegionId == sessionservice.session!.Office.RegionId)
        {
            ConfirmedRegion();//Save normal capture
        }
        else
        {
            regionChangeMessage = $"Are you sure you want to change the region of this application from {sservice.GetRegion(a.RegionId)} to {sservice.GetRegion(sessionservice.session.Office.RegionId!)} ?";
            showConfirmRegion = true;
            //toast.ShowError($"Please set your region to {db.GetRegion(a.RegionId)} to capture this record");
        }
    }

    private async Task btnManualCapture_Click()
    {

        rebox.BoxNo = rebox.BoxNo.ToUpper();
        if (string.IsNullOrEmpty(rebox.BoxNo))
        {
            if (sessionservice.session!.IsRmc())
            {
                toast.ShowError("a TDW BoxNo is required to capture at the RMC.");
                return;
            }
        }
        else
        {
            rebox = await db.GetBoxCounts(rebox);
            if (rebox.MiniBox > 5)
            {
                toast.ShowError("Only 5 Miniboxes allowed.");
                return;
            }
        }
        if (manualGrantType == "S" && string.IsNullOrEmpty(txtSearchSRD))
        {
            toast.ShowError("a Srd record requires an SRD no.");
            return;
        }
        SelectedApplication = new Application
        {
            TRANS_TYPE = 0,
            TDW_BOXNO = rebox.BoxNo,
            MiniBox = rebox.MiniBox,
            GrantType = manualGrantType,
            RegionId = sessionservice.session!.Office.RegionId,
            Id = txtSearchId,
            Srd_No = txtSearchSRD,
            LcType = "0",
            AppDate = DateTime.Now.ToStandardDateString(),
            AppStatus = "MAIN",
            DocsPresent = ""
        };

        showManualCapture = true;
    }

    private void ConfirmedRegion()
    {
        showConfirmRegion = false;
        showBrmModal = true;
        StateHasChanged();
    }

    private void CancelRegion()
    {
        showConfirmRegion = false;
        showBrmModal = false;
        StateHasChanged();
    }

    private async Task OnManualBrmSaved(bool merge)
    {
        await Search();
        showManualCapture = false;
    }
    private async Task OnBrmSaved(bool merge)
    {
        await Search();
        if (sessionservice.session.IsRmc())
        {
            rebox = await db.GetBoxCounts(rebox);
        }
        showBrmModal = false;
    }

    private void OnModalClosed()
    {

        SelectedApplication = new();
        showBrmModal = false;
        showManualCapture = false;
        StateHasChanged();
    }

}
