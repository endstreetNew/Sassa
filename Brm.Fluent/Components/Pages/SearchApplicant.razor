@page "/searchapplicant"
@page "/searchapplicant/{Id}"

@inject SessionService sessionservice
@inject BRMDbService db
@inject StaticService staticservice
@inject IDialogService dialogService
@inject IToastService toast
@inject NavigationManager nav
@inject IJSRuntime js

<BrmPageTitle Title="Capture" Loading="loading" />

<FluentStack>
    <FluentTextField @bind-Value="@txtSearchId" Placeholder="Enter Id here..." />
    <FluentTextField @bind-Value="@txtSearchSRD" Placeholder="Enter SRD here..." />
    <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size16.Search())" Title="Search" OnClick="@(async () => await Search())"></FluentButton>
    <FluentSelect TOption="KeyValue"
                  Items="@GrantTypes"
                  Id="grant-type-listbox"
                  Width="200px"
                  Height="250px"
                  Placeholder="Select Grant type..."
                  OptionValue="@(p => p.Id)"
                  OptionText="@(p => p.Name)"
                  @bind-Value="@manualGrantType" />

    @if (!string.IsNullOrEmpty(manualGrantType) && !DTSocPen.Where(a => a.GrantType == manualGrantType).Any())//a grantype is selected AND NO MATCHING sOCPEN rECORD
    {
        <FluentButton Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Edit())" Title="Manual Capture" OnClick="@(() => btnManualCapture_Click())">Manual Capture</FluentButton>
    }
    @if (sessionservice.session.IsRmc())
    {
        <BoxStatus Alignment="HorizontalAlignment.Right" rebox="@rebox" OnloadBox="GotoBox"></BoxStatus>
    }
</FluentStack>
<br />
<FluentCheckbox @bind-Value="@chkSearchFull" Label="Search Id History" />
<br />

<FluentTabs Class="tab">
    <FluentTab Id="tab-1">
        <Header>
            Socpen Results
        </Header>
        <Content>
            <div style="display: table; table-layout: fixed; width: 100%;">
                <div style="overflow-x: auto;">
                    <FluentDataGrid Style="min-width: max-content;" Items="@DTSocPen.AsQueryable()" TGridItem="Application" Pagination="@pagination">
                        <PropertyColumn Property="@(p => p.Id)" />
                        <TemplateColumn Title="Actions" Align="@Align.End">
                            <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Icons.Regular.Size12.Add())" Title="New" OnClick="@((p) => btnNewCover_Click(context))"></FluentButton>
                        </TemplateColumn>
                        <PropertyColumn Property="@(p => p.ChildId)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.GrantName)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.ChildId)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Srd_No)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Status)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Name)" />
                        <PropertyColumn Property="@(p => p.SurName)" />
                        <PropertyColumn Property="@(p => p.AppDate)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.ARCHIVE_YEAR)" Sortable="true" />
                        <PropertyColumn Property="@(p => p.StatusDate)" Sortable="true" />
                    </FluentDataGrid>
                </div>
            </div>
            <FluentPaginator State="@pagination" />
        </Content>
    </FluentTab>
    <FluentTab Id="tab-2">
        <Header>
            BRM Results
        </Header>
        <Content>
            <BRMGrid Changed="RefreshDTBrm" DTBrm="@DTBrmParents" DTMerges="@DTMerged"></BRMGrid>
        </Content>
    </FluentTab>
    <FluentTab Id="tab-3">
        <Header>
            Record History
        </Header>
        <Content>
            <BRMHistory IdNumber="@txtSearchId"></BRMHistory>
        </Content>
    </FluentTab>
</FluentTabs>

@code {

    [Parameter]
    public string Id { get; set; } = default!;

    string txtSearchId = "";
    string txtSearchSRD = "";
    bool chkSearchFull;

    string manualGrantType = "";

    protected List<KeyValue> GrantTypes = new();
    protected List<Application> DTSocPen = new();
    protected List<Application> DTBrm = new();
    protected List<Application> DTBrmParents = new();
    protected List<Application> DTMerged = new();
    protected Dictionary<string, int> Unmerged = new();
    protected Application SelectedApplication = new();

    protected Reboxing rebox = new Reboxing();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    protected bool loading;

    protected override async Task OnInitializedAsync()
    {
        GrantTypes = StaticDataService.GrantTypes.ToKeyValueList();
        if (!string.IsNullOrEmpty(Id))
        {
            txtSearchId = Id;
            await Search();
        }
    }

    private async Task Search()
    {
        long srdNo = 0;
        bool srdWithNoId = false;
        try
        {
            if (string.IsNullOrEmpty(txtSearchSRD) && string.IsNullOrEmpty(txtSearchId))
            {
                throw new Exception("No search criteria provided.");
            }
            //Clear previous results
            DTSocPen.Clear();
            DTBrm.Clear();
            DTBrmParents.Clear();
            DTMerged.Clear();
            loading = true;
            //Searching on SRD
            if (!string.IsNullOrEmpty(txtSearchSRD))
            {
                txtSearchId = await db.GetSocpenSearchId(txtSearchSRD);
                srdNo = long.Parse(txtSearchSRD);
                if (string.IsNullOrEmpty(txtSearchId))
                {
                    toast.ShowError("Srd No was not found.");
                    txtSearchId = $"S{txtSearchSRD.PadLeft(12, '0')}";
                    srdWithNoId = true;
                }
            }
            //Searching on ID
            if (!string.IsNullOrEmpty(txtSearchId))
            {
                txtSearchId = txtSearchId.Trim();
                if (srdWithNoId || txtSearchId.StartsWith("S"))
                {
                    DTSocPen = await db.SearchSocpenSrd(srdNo);
                }
                else
                {
                    if (!txtSearchId.IsNumeric() || txtSearchId.Length != 13) throw new Exception("Id is Invalid.");
                    DTSocPen = await db.SearchSocpenId(txtSearchId, chkSearchFull);
                }
                if (!DTSocPen.Any()) toast.ShowInfo("No Socpen results");
                MergeSocpen();
                await RefreshDTBrm();
            }
            loading = false;
        }
        catch (Exception ex)
        {
            //reset invalid searcCriteria;
            txtSearchSRD = "";
            txtSearchId = "";
            toast.ShowError(ex.Message);

        }
    }

    protected async Task RefreshDTBrm()
    {
        if (!string.IsNullOrEmpty(txtSearchId))
        {
            DTBrm = await db.SearchBRMID(txtSearchId);
            if (!DTBrm.Any())
            {
                toast.ShowInfo("No Brm results");
            }
            else
            {
                MergeBrm();
                if (sessionservice.session.IsRmc())
                {
                    rebox = await db.GetBoxCounts(rebox);
                }
            }
        }
    }

    protected void MergeSocpen()
    {
        if (DTSocPen.Any())
        {
            //Combination Grants
            foreach (var row in DTSocPen.Where(r => r.GrantType == "6"))
            {
                row.RowType = "C";
            }
            //MergeGrants
            foreach (var group in DTSocPen.GroupBy(d => d.AppDate).Where(g => g.Count() > 1))
            {
                foreach (var row in group.ToArray())
                {
                    row.RowType = "M";
                }
            }
        }
    }

    protected void MergeBrm()
    {
        if (DTBrm.Any())
        {
            DTBrmParents = DTBrm.Where(r => string.IsNullOrEmpty(r.Brm_Parent) || (!string.IsNullOrEmpty(r.Brm_Parent) && r.Brm_BarCode == r.Brm_Parent)).ToList();//&& r.TDW_BOXNO == null
            DTMerged = DTBrm.Where(r => !string.IsNullOrEmpty(r.Brm_Parent) && r.Brm_BarCode != r.Brm_Parent).ToList();
        }
    }

    private async Task btnNewCover_Click(Application a)
    {
        try
        {
            SelectedApplication = a;
            if (!await IsValid()) return;
            ///Modal Model
            BrmCaptureModel br = new BrmCaptureModel
                {
                    ApplicantId = SelectedApplication.Id,
                    SrdNo = SelectedApplication.Srd_No,
                    GrantType = SelectedApplication.GrantType,
                    ChildId = SelectedApplication.ChildId,      
                    LcType = SelectedApplication.LcType,
                    AppDate = SelectedApplication.AppDate ?? DateTime.Now.ToString("dd/MMM/yy"),
                    AppStatus = SelectedApplication.AppStatus,
                    Documents = SelectedApplication.DocsPresent,
                    TdwBoxno = SelectedApplication.TDW_BOXNO,
                    Reboxing = rebox
                };
            await ModalCapture(br);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    private async Task btnManualCapture_Click()
    {
        try
        {
            SelectedApplication = new Application
            {
                Id = txtSearchId,
                Srd_No = txtSearchSRD,
                TRANS_TYPE = 0,
                TDW_BOXNO = rebox.BoxNo,
                MiniBox = rebox.MiniBox,
                GrantType = manualGrantType,
                RegionId = sessionservice.session.Office.RegionId,
                LcType = "0",
                AppDate = DateTime.Now.ToStandardDateString(),
                AppStatus = "MAIN",
                DocsPresent = ""
            };
            if (!await IsValid()) return;
            BrmCaptureModel br = new BrmCaptureModel
                {
                    ApplicantId = SelectedApplication.Id,
                    SrdNo = SelectedApplication.Srd_No,
                    GrantType = SelectedApplication.GrantType,
                    LcType = SelectedApplication.LcType,
                    AppDate = SelectedApplication.AppDate ?? DateTime.Now.ToString("dd/MMM/yy"),
                    AppStatus = SelectedApplication.AppStatus,
                    Documents = SelectedApplication.DocsPresent,
                    TdwBoxno = SelectedApplication.TDW_BOXNO,
                    Reboxing = rebox,
                    IsManualCapture = true
                };

            await ModalCapture(br);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    private async Task ModalCapture(BrmCaptureModel br)
    {
        DialogParameters parameters = new()
            {
                Title = $"Capture New Brm Record",
                PrimaryAction = "Ok",
                PrimaryActionEnabled = false,
                // SecondaryAction = "No",
                // Height = "55%",
                Width = br.IsManualCapture ? "60%" : "30%",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };
        IDialogReference dialog = await dialogService.ShowDialogAsync<NewBRMContent>(br, parameters);
        var result = await dialog.Result;
        if (result.Cancelled || result.Data is null) return;
        BrmCaptureModel? capturedBrm = result.Data as BrmCaptureModel;
        if (capturedBrm == null) return; //huh?

        SelectedApplication.Brm_BarCode = capturedBrm.BrmBarcode;
        SelectedApplication.TRANS_TYPE = (int)capturedBrm.ApplicationType;
        SelectedApplication.ChildId = capturedBrm.ChildId;
        SelectedApplication.GrantType = capturedBrm.GrantType;
        SelectedApplication.LcType = capturedBrm.LcType;
        SelectedApplication.AppStatus = capturedBrm.AppStatus;
        SelectedApplication.OfficeId = sessionservice.session.Office.OfficeId;
        SelectedApplication.RegionId = sessionservice.session.Office.RegionId;
        SelectedApplication.FspId = sessionservice.session.Office.FspId;
        SelectedApplication.BrmUserName = sessionservice.session.SamName;
        SelectedApplication.Source = "Capture";
        if (capturedBrm.IsManualCapture)
        {
            SelectedApplication.Name = capturedBrm.Name;
            SelectedApplication.SurName = capturedBrm.Surname;
            SelectedApplication.DocsPresent = capturedBrm.Documents;
            SelectedApplication.Source = "ManualCapture";
        }
        var validationResult = SelectedApplication.IsValid();
        if (validationResult != "Valid")
        {
            toast.ShowError(validationResult);
            return;
        }
        DcFile file = await db.CreateBRM(SelectedApplication, "Brm.Fluent file Capture");
        await js.InvokeVoidAsync("open", System.Threading.CancellationToken.None, $"coversheet/{SelectedApplication.Brm_BarCode}", "_blank");
        await Search();
    }

    private async Task<bool> IsValid()
    {
        if (sessionservice.session.IsRmc())
        {
            if (string.IsNullOrEmpty(rebox.BoxNo))
            {
                toast.ShowError("a TDW BoxNo is required to capture at the RMC.");
                return false;
            }
            rebox.BoxNo = rebox.BoxNo.ToUpper();
            if (sessionservice.session.IsRmc() && string.IsNullOrEmpty(rebox.RegType))
            {
                rebox = await db.GetBoxCounts(rebox);
            }
            if (rebox.MiniBox > 5)
            {
                toast.ShowError("Only 5 Miniboxes allowed.");
                return false;
            }

            SelectedApplication.TDW_BOXNO = rebox.BoxNo;
            SelectedApplication.MiniBox = rebox.MiniBox;
        }
        //Check valid office
        if (SelectedApplication.RegionId != sessionservice.session.Office.RegionId)
        {
            string regionChangeMessage = $"Are you sure you want to change the region of this application from {staticservice.GetRegion(SelectedApplication.RegionId)} to {staticservice.GetRegion(sessionservice.session.Office.RegionId!)} ?";
            DialogParameters parameters = new()
                {
                    PrimaryAction = "Ok",
                    Height = "230px",
                    Width = "450px",
                    Title = $"Confirm Region change.",
                    PreventDismissOnOverlayClick = true,
                    PreventScroll = true,
                };
            IDialogReference dialog = await dialogService.ShowDialogAsync<ConfirmContent>(regionChangeMessage, parameters);
            var result = await dialog.Result;
            if (result.Cancelled)
            {
                toast.ShowError("You can change your office on the home page.");
                return false;
            }
        }
        return true;
    }

    private void GotoBox()
    {
        if (string.IsNullOrEmpty(rebox.BoxNo))
        {
            toast.ShowError("Please enter a TDW BoxNo.");
            return;
        };
        nav.NavigateTo($"boxing/{rebox.BoxNo}");
    }

}
