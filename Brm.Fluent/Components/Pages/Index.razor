@page "/"
@page "/brmprod"

@inject SessionService sessionservice
@inject StaticService staticservice
@inject IDialogService DialogService

<div class="pageTitle">
<h3>Home</h3>
</div>
    @if(sessionservice.session.IsBrmUser())
    {

     <div class="componentBG">
    <FluentTabs Class="tab">
            <FluentTab Label="User"  Id="tab-1">
                <span><strong>User Details</strong></span>
                    <hr />
                <div class="input-group mb-1">
                    <span class="input-group-text">Name</span>
                    <label type="text" class="form-control">@sessionservice.session!.Name</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Surname</span>
                    <label type="text" class="form-control">@sessionservice.session!.Surname</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Email</span>
                    <label type="text" class="form-control">@sessionservice.session!.Email</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Region</span>
                    <label type="text" class="form-control">@sessionservice.session!.Office.RegionName</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Office</span>
                    <label type="text" class="form-control">@sessionservice.session!.Office.OfficeName</label>
@*                     <button class="btn btn-primary active" @onclick="ShowOfficeModal">Change Office</button> *@
                    <FluentButton Appearance="Appearance.Accent" OnClick="@OpenChangeUserOffice">Change Office</FluentButton>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Service Point</span>
                    <label type="text" class="form-control">@staticservice.GetServicePointName(sessionservice.session.Office.FspId)</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Office Type</span>
                    <label type="text" class="form-control">@sessionservice.session.Office.OfficeType</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Supervisor</span>
                    <label type="text" class="form-control">@(sessionservice.session.IsInRole("GRP_BRM_Supervisors") ? "Yes" : "No")</label>
                </div>
        </FluentTab>
            <FluentTab Label="Roles" Id="tab-2">
                <span><strong>Roles</strong></span>
                <hr/>
                @foreach (var role in sessionservice.session.Roles)
                {
                    <label type="text" class="form-control">@role</label>
                }
            </FluentTab>
     </FluentTabs>
        </div>
    }
    else
    {
        <div class="whiteArea">
            <div class="spinner spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

@code
{
    // bool showOfficeModal;


    protected override void OnInitialized()
    {

    }

    // protected void OnCloseModal()
    // {
    //     showOfficeModal = false;
    //     StateHasChanged();
    // }

    // protected void ShowOfficeModal()
    // {
    //     showOfficeModal = true;
    // }

    private async Task OpenChangeUserOffice()
    {
        // Create a new instance of DialogData
        // to allow the user to cancel the update
        UserOffice data = sessionservice.session.Office;

        var dialog = await DialogService.ShowDialogAsync<ChangeUserOffice>(data, new DialogParameters()
            {
                Height = "340px",
                Width = "550px",
                Title = $"Updating Office for {sessionservice.session.Name}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            // sessionservice.session.Office = (UserOffice)result.Data;
            // //Update the office linq
            // await staticservice.UpdateUserLocalOffice(sessionservice.session.Office.OfficeId, sessionservice.session);
            // //Update the User
            // sessionservice.UpdateUserOffice();
            StateHasChanged();
        }
    }
}

