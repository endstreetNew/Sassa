@page "/"
@page "/brmprod"

@inject SessionService sessionservice
@inject StaticService staticservice
@inject IDialogService DialogService

<BrmPageTitle Title="Home"/>
@if(sessionservice.session.IsBrmUser())
{
         <div class="whiteArea">
             <FluentStack>
                <span><strong>User Details</strong></span>
            <FluentButton Appearance="Appearance.Accent" OnClick="@OpenChangeUserOffice">Change Office</FluentButton>
            </FluentStack>
            <hr />
            <FluentStack>
                <span>Name</span>
                <FluentLabel>@sessionservice.session!.Name</FluentLabel>
            </FluentStack>
            <FluentStack>
                <span >Surname</span>
                <label>@sessionservice.session!.Surname</label>
            </FluentStack>
            <FluentStack>
                <span >Email</span>
                <label>@sessionservice.session!.Email</label>
            </FluentStack>
            <FluentStack>
                <span >Region</span>
                <label >@sessionservice.session!.Office.RegionName</label>
            </FluentStack>
            <FluentStack>
                <span >Office</span>
                <label >@sessionservice.session!.Office.OfficeName</label>
            </FluentStack>
            <FluentStack>
                <span >Service Point</span>
                <label >@staticservice.GetServicePointName(sessionservice.session.Office.FspId)</label>
            </FluentStack>
            <FluentStack>
                <span >Office Type</span>
                <label >@sessionservice.session.Office.OfficeType</label>
            </FluentStack>
            <FluentStack>
                <span >Supervisor</span>
                <label >@(sessionservice.session.IsInRole("GRP_BRM_Supervisors") ? "Yes" : "No")</label>
            </FluentStack>
        </div>

                <span><strong>Roles</strong></span>
                <hr/>
                @foreach (var role in sessionservice.session.Roles)
                {
                    <FluentLabel>@role</FluentLabel>
                }


                <span><strong>Appearance</strong></span>
                <hr/>
                 <FluentDesignTheme Mode="@Mode" OfficeColor="@officeColor" StorageName="theme" />
                <div style="min-height: 250px;">
                    <FluentGrid>
                        <FluentGridItem>
                    <FluentGridItem>
                        <FluentSelect Label="Theme"
                                      Width="250px"
                                      Items="@(Enum.GetValues<DesignThemeModes>())"
                                      @bind-SelectedOption="@Mode" />
                    </FluentGridItem>
                            <FluentSelect Label="Color"
                                          Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor)i))"
                                          Height="200px"
                                          Width="250px"
                                          @bind-SelectedOption="@officeColor">
                                <OptionTemplate>
                                    <FluentStack>
                                        <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                                    Color="Color.Custom"
                                                    CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
                                        <FluentLabel>@context</FluentLabel>
                                    </FluentStack>
                                </OptionTemplate>
                            </FluentSelect>
                        </FluentGridItem>
                    </FluentGrid>
                </div>

    }
    else
    {

            <div class="spinner spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
    }

@code
{
    public DesignThemeModes Mode { get; set; }
    public OfficeColor officeColor { get; set; }

    protected override void OnInitialized()
    {
        Mode = DesignThemeModes.System;
        officeColor = OfficeColor.Sway;
    }

    private async Task OpenChangeUserOffice()
    {
        // Create a new instance of DialogData
        // to allow the user to cancel the update
        UserOffice data = sessionservice.session.Office;

        var dialog = await DialogService.ShowDialogAsync<ChangeUserOffice>(data, new DialogParameters()
            {
                Height = "340px",
                Width = "550px",
                Title = $"Updating Office for {sessionservice.session.Name}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
           StateHasChanged();
        }
    }
}

