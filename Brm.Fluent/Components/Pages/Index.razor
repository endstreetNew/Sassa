@page "/"
@page "/brmprod"
@using Microsoft.FluentUI.AspNetCore.Components
@using Microsoft.FluentUI.AspNetCore.Components.Extensions


@inject SessionService sessionservice
@inject StaticService staticservice
@inject IDialogService DialogService

<div class="pageTitle">
<h3>Home</h3>
</div>
    @if(sessionservice.session.IsBrmUser())
    {

     <div class="componentBG">
    <FluentTabs Class="tab">
            <FluentTab Label="User"  Id="tab-1">
                <span><strong>User Details</strong></span>
                    <hr />
                <div class="input-group mb-1">
                    <span class="input-group-text">Name</span>
                    <label type="text" class="form-control">@sessionservice.session!.Name</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Surname</span>
                    <label type="text" class="form-control">@sessionservice.session!.Surname</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Email</span>
                    <label type="text" class="form-control">@sessionservice.session!.Email</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Region</span>
                    <label type="text" class="form-control">@sessionservice.session!.Office.RegionName</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Office</span>
                    <label type="text" class="form-control">@sessionservice.session!.Office.OfficeName</label>
@*                     <button class="btn btn-primary active" @onclick="ShowOfficeModal">Change Office</button> *@
                    <FluentButton Appearance="Appearance.Accent" OnClick="@OpenChangeUserOffice">Change Office</FluentButton>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Service Point</span>
                    <label type="text" class="form-control">@staticservice.GetServicePointName(sessionservice.session.Office.FspId)</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Office Type</span>
                    <label type="text" class="form-control">@sessionservice.session.Office.OfficeType</label>
                </div>
                <div class="input-group mb-1">
                    <span class="input-group-text">Supervisor</span>
                    <label type="text" class="form-control">@(sessionservice.session.IsInRole("GRP_BRM_Supervisors") ? "Yes" : "No")</label>
                </div>
        </FluentTab>
            <FluentTab Label="Roles" Id="tab-2">
                <span><strong>Roles</strong></span>
                <hr/>
                @foreach (var role in sessionservice.session.Roles)
                {
                    <label type="text" class="form-control">@role</label>
                }
            </FluentTab>
            <FluentTab Label="Appearance" Id="tab-3">
                <span><strong>Appearance</strong></span>
                <hr/>
@*                 <FluentDesignTheme Mode="@Mode" @bind-Mode="@Mode"
                                   @bind-OfficeColor="@officeColor"
                                   OnLoaded="@OnThemeLoaded"
                                   OnLuminanceChanged="@OnLuminanceChanged"
                                   StorageName="theme" /> *@
                <FluentDesignTheme Mode="@DesignThemeModes.System" OfficeColor="@officeColor" StorageName="theme" />

                <div style="min-height: 250px;">
                    <FluentGrid>
@*                         <FluentGridItem>
                            <FluentSelect Label="Theme"
                                          Width="250px"
                                          Items="@(Enum.GetValues<DesignThemeModes>())"
                                          @bind-SelectedOption="@Mode" />
                        </FluentGridItem> *@

                        <FluentGridItem>
                            <FluentSelect Label="Color"
                                          Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor)i))"
                                          Height="200px"
                                          Width="250px"
                                          @bind-SelectedOption="@officeColor">
                                <OptionTemplate>
                                    <FluentStack>
                                        <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                                    Color="Color.Custom"
                                                    CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
                                        <FluentLabel>@context</FluentLabel>
                                    </FluentStack>
                                </OptionTemplate>
                            </FluentSelect>
                            <FluentButton Appearance="Appearance.Accent" OnClick="PickRandomColor">Feeling lucky?</FluentButton>
                        </FluentGridItem>
                    </FluentGrid>

                    <FluentStack Style="margin: 30px 0px; padding: 30px; border: 1px solid var(--accent-fill-rest);">
                        <FluentIcon Value="@(new Icons.Regular.Size24.Airplane())" />
                        <FluentLabel>Example of content</FluentLabel>
                        <FluentButton Appearance="Appearance.Outline">Outline button</FluentButton>
                        <FluentButton Appearance="Appearance.Accent">Accent button</FluentButton>
                    </FluentStack>
                </div>

             </FluentTab>
     </FluentTabs>
        </div>
    }
    else
    {
        <div class="whiteArea">
            <div class="spinner spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

@code
{
    public DesignThemeModes Mode { get; set; }
    public OfficeColor officeColor { get; set; }

    protected override void OnInitialized()
    {
        Mode = DesignThemeModes.System;
        officeColor = OfficeColor.Sway;
    }

    // void OnThemeLoaded(LoadedEventArgs e)
    // {
    //    //DemoLogger.WriteLine($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    // }

    // void OnLuminanceChanged(LuminanceChangedEventArgs e)
    // {
    //     //DemoLogger.WriteLine($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    // }

    void PickRandomColor()
    {
        officeColor = OfficeColorUtilities.GetRandom();
    }
    private async Task OpenChangeUserOffice()
    {
        // Create a new instance of DialogData
        // to allow the user to cancel the update
        UserOffice data = sessionservice.session.Office;

        var dialog = await DialogService.ShowDialogAsync<ChangeUserOffice>(data, new DialogParameters()
            {
                Height = "340px",
                Width = "550px",
                Title = $"Updating Office for {sessionservice.session.Name}",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
           StateHasChanged();
        }
    }
}

