@page "/ecdata"
@using Sassa.BRM.Data.ViewModels

@inject BRMDbService db
@inject Helper helper
@inject IToastService toast
@inject StaticService sservice

<BrmPageTitle Title="ECMIS Data" Loading="@loading"></BrmPageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <WidgetTitle Title="Filter Options" />
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentDatePicker Placeholder="<From Date>" @bind-Value="period.FromNullDate" />
        <FluentDatePicker Placeholder="<To Date>" @bind-Value="period.ToNullDate" />
@*         <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetRegions().ToList()" Placeholder="<Region>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@office.RegionId" /> *@
        <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetReportGrants().ToList()" Placeholder="<Grant Type>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@grantType" /> 
        <FluentButton Appearance="Appearance.Accent" @onclick="ValidateReportFilter">Save Report</FluentButton>
    </FluentStack>
    <WidgetTitle Title="Search" />
    <FluentStack>
        <FluentTextField @bind-Value="@searchId" Placeholder="Enter Id/Filenumber..." />
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Title="Search" OnClick="SearchMis"></FluentButton>
    </FluentStack>
    <hr />

    <FluentDataGrid Items="@misFiles.AsQueryable()" TGridItem="EcMisTbl" Pagination="@paginationState">
        <PropertyColumn Title="ID No" Property="f => f.IdNumber" />
        <PropertyColumn Title="Name" Property="f => f.Name" />
        <PropertyColumn Title="Surname" Property="f => f.Surname" />
        <PropertyColumn Title="Grant Type" Property="f => f.GrantType" />
        <PropertyColumn Title="App Date" Property="f => f.GrantDate" />
        <PropertyColumn Title="Date Change" Property="f => f.DateChange" />
        <PropertyColumn Title="File Number" Property="f => f.FileNumber" />
        <PropertyColumn Title="Region Id" Property="f => f.RegionId" />
        <PropertyColumn Title="Registry Type" Property="f => f.RegistryType" />

    </FluentDataGrid>
    <FluentPaginator State="@paginationState" />
</FluentStack>


@code {
    protected List<EcMisTbl> misFiles = new();
    protected string searchId = "";
    PaginationState paginationState = new PaginationState { ItemsPerPage = 15 };
    protected ReportPeriod period = new ReportPeriod { FromDate = DateTime.Now.AddYears(-10), ToDate = DateTime.Now };
    protected UserOffice office = new();
    protected string grantType = "";
    protected bool loading = true;

    protected ReportDefinition report = new();

    protected override async Task OnInitializedAsync()
    {
        report = new ReportDefinition { ReportIndex = "1", ReportName = "EC Mis Data", FilterOptions = new FilterOptions() { "FromDate", "ToDate", "Region", "GrantType" } };
        misFiles = await db.GetEcFiles(period, grantType, searchId, true);
        loading = false;
    }

    protected async Task SearchMis()
    {
        if(string.IsNullOrEmpty(searchId) || searchId.Length < 13)
        {
            toast.ShowError("Please enter a valid applicant id.");
            return;
        }
        try
        {
            misFiles = await db.GetEcFiles(period, grantType, searchId, true);
        }
        catch//(Exception ex)
        {
            toast.ShowError("Please enter a valid applicant id.");
        }
    }
    private ModelContext context = default!;

    private async Task ValidateReportFilter()
    {
        try
        {
            foreach (var option in report.FilterOptions)
            {
                switch (option)
                {
                    case "From Date":
                    case "To Date":
                        break;
                    case "Region":
                        if (string.IsNullOrEmpty(office.RegionId))
                        {
                            toast.ShowError($"Please select a Region.");
                            return;
                        }
                        break;
                    case "GrantType":
                        break;

                }
            }
            string FileName = helper.GetAuditFileName(report.ReportName.Replace(" ", "_"), StaticDataService.RegionCode(office.RegionId));
            toast.ShowInfo($"{report.ReportName} queued.");

            ReportHeader header = new ReportHeader();
            header.FromDate = period.FromDate.ToShortDateString();
            header.ToDate = period.ToDate.ToShortDateString();
            int usernameIndex = FileName.IndexOf('-') + 1;
            header.Username = FileName.Substring(usernameIndex, FileName.Substring(usernameIndex).IndexOf("-"));//{_session.Office.RegionCode}-{_session.SamName.ToUpper()}-
            header.Region = StaticDataService.RegionName(office.RegionId);
            //List<MisLivelinkTbl> result = //db.GetMisFiles(period, office.RegionId, grantType, searchId, context!).ToList();
            List<EcMisTbl> result = await db.GetEcFiles(period, grantType, searchId, false);
            result.ToCsv<EcMisTbl>(FileName, header, StaticDataService.ReportFolder);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}