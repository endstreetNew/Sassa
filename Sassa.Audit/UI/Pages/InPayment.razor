@page "/inpayment"
@using Sassa.BRM.Data.ViewModels

@inject Helper helper
@inject IToastService toast
@inject IDbContextFactory<ModelContext> dbContextFactory
@inject StaticService sservice

<BrmPageTitle Title="In Payment Data" Loading="@loading"></BrmPageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <WidgetTitle Title="Filter Options" />
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetAuditRegions().ToList()" Placeholder="<Region>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@office.RegionId" />
        <FluentButton Appearance="Appearance.Accent" @onclick="ValidateReportFilter">All records Report</FluentButton>
        <FluentButton Appearance="Appearance.Accent" @onclick="AllMissing">Missing Report</FluentButton>
    </FluentStack>
    <WidgetTitle Title="Search" />
    <FluentStack>
        <FluentTextField @bind-Value="@searchId" Placeholder="Enter Id/Filenumber..." />
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Title="Search" OnClick="@(async () => await SearchMis())"></FluentButton>
    </FluentStack>
    <hr />

    <FluentDataGrid Items="@misFiles.AsQueryable()" TGridItem="Inpaymentmonthly" Pagination="@paginationState" >
        <PropertyColumn Title="ID No" Property="f => f.ApplicantNo" />
        <PropertyColumn Title="Name" Property="f => f.FirstName" />
        <PropertyColumn Title="Surname" Property="f => f.Surname" />
        <PropertyColumn Title="Grant Type" Property="f => f.GrantType" />
         <PropertyColumn Title="LO Capture" Property="f => f.LoCapture" /> 
         <PropertyColumn Title="BRM" Property="f => f.Brm" />
        <PropertyColumn Title="TDW" Property="f => f.Tdw" />
        <PropertyColumn Title="MIS" Property="f => f.Mis" />
        <PropertyColumn Title="ECMIS" Property="f => f.Ecmis" />
        <PropertyColumn Title="OGA" Property="f => f.Oga" /> 
        <PropertyColumn Title="Cs" Property="f => f.Cs" /> 
        <PropertyColumn Title="Region Id" Property="f => f.RegionId" />
        <PropertyColumn Title="File Exists" Property="p => !(p.LoCapture == 0 && p.Brm == 0 && p.Oga ==0 && p.Cs == 0 && p.Ecmis == 0 && p.Mis ==0 && p.MisLc == 0 && p.Tdw == 0 && p.Lo == 0)" />
    </FluentDataGrid>
    <FluentPaginator State="@paginationState" />
</FluentStack>


@code {
    protected List<Inpaymentmonthly> misFiles = new();
    protected string searchId = "";
    PaginationState paginationState = new PaginationState { ItemsPerPage = 15 };

    //FilterOptions
    protected UserOffice office = new();
    protected List<KeyValuePair<string, string>> ogaStatusOptions = new();
    protected List<KeyValuePair<string, string>> regTypeOptions = new();
    protected string regType = "";
    protected string ogaStatus  = "";
    protected bool loading = true;

    protected ReportDefinition report = new();

    protected override void OnInitialized()
    {

        report = new ReportDefinition { ReportIndex = "1", ReportName = "In Payment Files", FilterOptions = new FilterOptions() { "Region", } };
        using var dbContext = dbContextFactory.CreateDbContext();
        misFiles = dbContext.Inpaymentsmonthly.Take(100).ToList();
        loading = false;
    }

    protected async Task SearchMis()
    {

        if(string.IsNullOrEmpty(searchId) || searchId.Length < 13)
        {
            toast.ShowError("Please enter a valid applicant id.");
            loading = false;
            return;
        }
        loading = true;
        try
        {
            using var dbContext = dbContextFactory.CreateDbContext();
            misFiles = await dbContext.Inpaymentsmonthly.Where(x => x.ApplicantNo == searchId).ToListAsync();
        }
        catch(Exception ex)
        {
            toast.ShowError(ex.Message);
        }
        loading = false;
    }

    private async Task ValidateReportFilter()
    {
        loading = true;
        using var dbContext = dbContextFactory.CreateDbContext();
        var query = dbContext.Inpaymentsmonthly;
        try
        {
            foreach (var option in report.FilterOptions)
            {
                switch (option)
                {
                    case "Region":
                        if (string.IsNullOrEmpty(office.RegionId))
                        {
                            toast.ShowError($"Please select a Region.");
                            return;
                        }
                        query = query.Where(m => m.RegionId == office.RegionId);
                        break;

                }
            }
            string RegionName;
            if (office.RegionId != "0")
            {
                RegionName = StaticDataService.RegionCode(office.RegionId);
            }
            else
            {
                RegionName = "NO REGION";

            }

            string FileName = helper.GetAuditFileName(report.ReportName.Replace(" ", "_"), RegionName);

            toast.ShowInfo($"{report.ReportName} queued.");

            ReportHeader header = new ReportHeader();
            // header.FromDate = period.FromDate.ToShortDateString();
            // header.ToDate = period.ToDate.ToShortDateString();
            int usernameIndex = FileName.IndexOf('-') + 1;
            header.Username = FileName.Substring(usernameIndex, FileName.Substring(usernameIndex).IndexOf("-"));//{_session.Office.RegionCode}-{_session.SamName.ToUpper()}-
            header.Region = RegionName;
            List<Inpaymentmonthly> result = await query.ToListAsync();//context.Inpayments.Where(m =>  m.RegionId == office.RegionId).ToList();
            result.ToXlsx<Inpaymentmonthly>(FileName, header, StaticDataService.ReportFolder);
            misFiles = await dbContext.Inpaymentsmonthly.Take(100).ToListAsync(); 
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }

    private async Task AllMissing()
    {
        try
        {
            loading = true;
            if (string.IsNullOrEmpty(office.RegionId))
            {
                toast.ShowError($"Please select a Region.");
                return;
            }
            using var dbContext = dbContextFactory.CreateDbContext();
            var query = dbContext.Inpaymentsmonthly.Where(m => m.RegionId == office.RegionId);
            //misFiles = misFiles.Where(m => m.BrmBarcode == null && m.ClmNo == null && m.MisFileNo == null && m.EcMisFile == null && m.OgaStatus == "None" && m.RegionId == office.RegionId);
            query = query.Where(p => p.LoCapture == 0 && p.Brm == 0 && p.Oga ==0 && p.Cs == 0 && p.Ecmis == 0 && p.Mis ==0 && p.MisLc == 0 && p.Tdw == 0 && p.Lo == 0);
            string RegionName;
            if (office.RegionId != "0")
            {
                RegionName = StaticDataService.RegionCode(office.RegionId);
            }
            else
            {
                RegionName = "NO REGION";
            }

            string FileName = helper.GetAuditFileName(report.ReportName.Replace(" ", "_"), RegionName);

            toast.ShowInfo($"{report.ReportName} queued.");

            ReportHeader header = new ReportHeader();
            // header.FromDate = period.FromDate.ToShortDateString();
            // header.ToDate = period.ToDate.ToShortDateString();
            int usernameIndex = FileName.IndexOf('-') + 1;
            header.Username = FileName.Substring(usernameIndex, FileName.Substring(usernameIndex).IndexOf("-"));//{_session.Office.RegionCode}-{_session.SamName.ToUpper()}-
            header.Region = RegionName;
            List<Inpaymentmonthly> result = await query.ToListAsync();//context.Inpayments.Where(m =>  m.RegionId == office.RegionId).ToList();
            result.ToXlsx<Inpaymentmonthly>(FileName, header, StaticDataService.ReportFolder);
            misFiles = await dbContext.Inpaymentsmonthly.Take(100).ToListAsync();
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
        }
        finally
        {
            loading = false;
        }
    }
}