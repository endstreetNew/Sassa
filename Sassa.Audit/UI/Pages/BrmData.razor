@page "/brmdata"
@using Microsoft.EntityFrameworkCore
@using Sassa.BRM.Data.ViewModels

@inject Helper helper

@inject BRMDbService db
@inject StaticService sservice
@inject ReportDataService rs
@inject IToastService toast


@attribute [StreamRendering]

<BrmPageTitle Title="BRM Data" Loading="loading"></BrmPageTitle>
<FluentStack Orientation="Orientation.Vertical">
    <WidgetTitle Title="Filter Options" />
    <FluentStack Orientation="Orientation.Horizontal">
        <FluentDatePicker Placeholder="<From Date>" @bind-Value="period.FromNullDate" />
        <FluentDatePicker Placeholder="<To Date>" @bind-Value="period.ToNullDate" />
        <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetRegions().ToList()" Placeholder="<Region>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@office.RegionId" />
        <FluentSelect TOption="KeyValuePair<string,string>" Items="@sservice.GetReportGrants().ToList()" Placeholder="<Grant Type>" OptionValue="@(p => p.Key)" OptionText="@(p => p.Value)" @bind-Value="@grantType" />
        <FluentButton Appearance="Appearance.Accent" @onclick="ValidateReportFilter">Save Report</FluentButton>
    </FluentStack>
    <WidgetTitle Title="Search" />
    <FluentStack>
        <FluentTextField @bind-Value="@searchId" Placeholder="Enter Id/Filenumber..." />
        <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size16.Search())" Title="Search" OnClick="Search"></FluentButton>
    </FluentStack>
    <hr />
    <FluentDataGrid @ref="grid" Items="@files.AsQueryable()" TGridItem="DcFileMini" Pagination="@pagination">
        <PropertyColumn Width="140px" Property="@(p => p.Id)" Title="Id number"/>
        <PropertyColumn Width="120px" Property="@(p => p.Name)" Title="Name" Sortable="true" />
        <PropertyColumn Width="150px" Property="@(p => p.Surname)" Title="Surname" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.GrantType)" Sortable="true" />
        <PropertyColumn Width="200px" Property="@(p => p.Region)" />
        <PropertyColumn Width="100px" Property="@(p => p.RegType)" Sortable="true" />
    </FluentDataGrid>
    <FluentPaginator State="@pagination" />
</FluentStack>



@code {
    protected PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    FluentDataGrid<DcFileMini>? grid;
    protected ReportDefinition report = new();
    protected UserOffice office = new();
    protected List<DcFileMini> files = new();
    protected bool loading = true;

    protected ReportPeriod period = new ReportPeriod { FromDate = DateTime.Now.AddYears(-1), ToDate = DateTime.Now };

    string grantType = "";
    string searchId = "";

    protected override async Task OnInitializedAsync()
    {
        grid?.SetLoadingState(true);
        report = new ReportDefinition { ReportIndex = "1", ReportName = "Brm Data", FilterOptions = new FilterOptions() { "FromDate", "ToDate", "Region", "GrantType" } };
        files = await db.GetBrmFiles(period, office.RegionId, grantType, searchId, true);
        grid?.SetLoadingState(false);
        loading = false;
    }

    protected async Task Search()
    {
        if (string.IsNullOrEmpty(searchId) || searchId.Length < 13)
        {
            toast.ShowError("Please enter a valid applicant id.");
            return;
        }
        loading = true;
        files = await db.GetBrmFiles(period, office.RegionId, grantType, searchId, true);
        loading = false;
        StateHasChanged();
        
    }

    private async Task ValidateReportFilter()
    {
        try
        {
            grid?.SetLoadingState(true);
            StateHasChanged();
            foreach (var option in report.FilterOptions)
            {
                switch (option)
                {
                    case "From Date":
                    case "To Date":
                        break;
                    case "Region":
                        if (string.IsNullOrEmpty(office.RegionId))
                        {
                            toast.ShowError($"Please select a Region.");
                            grid?.SetLoadingState(false);
                            return;
                        }
                        break;
                    case "GrantType":
                        break;

                }
            }
            string FileName = helper.GetAuditFileName(report.ReportName.Replace(" ", "_"), StaticDataService.RegionCode(office.RegionId));
            toast.ShowInfo($"{report.ReportName} queued.");

            ReportHeader header = new ReportHeader();
            header.FromDate = period.FromDate.ToShortDateString();
            header.ToDate = period.ToDate.ToShortDateString();
            int usernameIndex = FileName.IndexOf('-') + 1;
            header.Username = FileName.Substring(usernameIndex, FileName.Substring(usernameIndex).IndexOf("-"));//{_session.Office.RegionCode}-{_session.SamName.ToUpper()}-
            header.Region = StaticDataService.RegionName(office.RegionId);
            List<DcFileMini> result = await db.GetBrmFiles(period, office.RegionId, grantType, searchId, false);
            result.ToXlsx<DcFileMini>(FileName, header, StaticDataService.ReportFolder);
            grid?.SetLoadingState(false);
        }
        catch (Exception ex)
        {
            toast.ShowError(ex.Message);
            grid?.SetLoadingState(false);
        }
    }

}