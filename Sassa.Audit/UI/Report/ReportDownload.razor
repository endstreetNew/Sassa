@page "/download"

@using System.Reflection
@using System.Text
@using Sassa.Services
@inject IJSRuntime JS
@inject ReportDataService rs
@inject CSService cs
@inject IToastService toast
@* @inject SessionService sessionservice *@


<WidgetTitle Title="Download Reports" />

@if (props != null)
{
    <div style="min-height:400px;">
        <table class="table table-sm" style="font-size: small; ">
            <thead>
                <tr>
                    @foreach (var prop in props)
                    {
                        <th scope="col">@prop.Name</th>
                    }
                    @foreach (var propa in props.Where(p => p.Name == "FileName"))
                    {
                        <th>Action</th>
                        <th></th>
                    }
                </tr>
            </thead>
            <tbody>

                @foreach (var u in pagedResult)
                {
                    <tr>
                        @foreach (var prop in props)
                        {
                        <td scope="col">
                            @if (prop.PropertyType == typeof(bool))
                            {
                                @if (prop.GetValue(u) == null || (bool)(prop.GetValue(u) ?? false) == false)
                                {
                                    <span class="oi oi-x" aria-hidden="true"></span>
                                }
                                else
                                {
                                    <span class="oi oi-check" aria-hidden="true"></span>
                                }
                            }
                            else
                            {
                                @prop.GetValue(u);
                            }
                        </td>
                        }
                        @foreach (var propa in props.Where(p => p.Name == "FileName"))
                        {
                            <td>
                                <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.ArrowDown())" OnClick="@(async () => await DownloadFileFromStream(u))">DownLoad</FluentButton>
                            </td>
                            <td>
                                <FluentButton Appearance="Appearance.Accent" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size20.ArrowDown())" OnClick="@(async () => await ShareOnCs(u))">Share on CS</FluentButton>
                            </td>
                            <td>
                                <FluentButton BackgroundColor="Red" Color="White" IconEnd="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Regular.Size12.Delete())" OnClick="@(() => btnDelete_Click(propa.GetValue(u)!.ToString()!))" />
                            </td>
                        }
                    </tr>
                }

            </tbody>
        </table>
    </div>
}
else
{
    <p>No Data.</p>
}

@code {
    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public string ReportFolder { get; set; } = "";

    List<CsvListItem> pagedResult = new();

    List<PropertyInfo> props = new List<PropertyInfo>();

    protected override void OnInitialized()
    {
        pagedResult = rs.GetFiles("Audit");
        if (!pagedResult.Any())
        {
            return;
        }
        Type? myType = pagedResult.First()?.GetType();
        if (myType == null) return;
        props = new List<PropertyInfo>(myType.GetProperties());
    }
    protected override void OnParametersSet()
    {
        if (!pagedResult.Any()) return;
        Type? myType = pagedResult.First()?.GetType();
        if (myType == null) return;
        props = new List<PropertyInfo>(myType.GetProperties());
    }

    protected void btnDelete_Click(string fileName)
    {
        rs.DeleteReport(fileName);
        pagedResult = rs.GetFiles("Audit");
    }

    private Stream GetFileStream(string path)
    {
        return File.OpenRead(path);
    }

    private async Task DownloadFileFromStream(CsvListItem u)
    {
        try
        {
            var fileName = u.FileName;
            await JS.InvokeVoidAsync("triggerFileDownload", fileName, $"/brmFiles/{fileName}");
        }
        catch(Exception ex)
        {
            var s = ex.Message;
        }
    }
    public async Task ShareOnCs(CsvListItem u)
    {
        try
        {

            var fileName = u.FileName ?? string.Empty;
            if (string.IsNullOrEmpty(fileName))
            {
                toast.ShowError("File name is empty.");
                return;
            }
            var filePath = Path.Combine(StaticDataService.ReportFolder, fileName);
            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            using (StreamReader reader = new StreamReader(fs, Encoding.UTF8))
            {
                string fileContent = reader.ReadToEnd();
                await cs.UploadSharedReport(fileContent, fileName);
            }

            toast.ShowSuccess("File sent to  CS (BRM shared Reports).");
        }
        catch
        {
            toast.ShowError("Error sending File to CS.");
        }
    }
}
